type token =
  | IDENT of (string * Cabs.cabsloc)
  | CST_CHAR of (int64 list * Cabs.cabsloc)
  | CST_WCHAR of (int64 list * Cabs.cabsloc)
  | CST_INT of (string * Cabs.cabsloc)
  | CST_FLOAT of (string * Cabs.cabsloc)
  | NAMED_TYPE of (string * Cabs.cabsloc)
  | CST_STRING of (int64 list * Cabs.cabsloc)
  | CST_WSTRING of (int64 list * Cabs.cabsloc)
  | EOF
  | CHAR of (Cabs.cabsloc)
  | INT of (Cabs.cabsloc)
  | DOUBLE of (Cabs.cabsloc)
  | FLOAT of (Cabs.cabsloc)
  | VOID of (Cabs.cabsloc)
  | INT64 of (Cabs.cabsloc)
  | INT32 of (Cabs.cabsloc)
  | ENUM of (Cabs.cabsloc)
  | STRUCT of (Cabs.cabsloc)
  | TYPEDEF of (Cabs.cabsloc)
  | UNION of (Cabs.cabsloc)
  | SIGNED of (Cabs.cabsloc)
  | UNSIGNED of (Cabs.cabsloc)
  | LONG of (Cabs.cabsloc)
  | SHORT of (Cabs.cabsloc)
  | VOLATILE of (Cabs.cabsloc)
  | EXTERN of (Cabs.cabsloc)
  | STATIC of (Cabs.cabsloc)
  | CONST of (Cabs.cabsloc)
  | RESTRICT of (Cabs.cabsloc)
  | AUTO of (Cabs.cabsloc)
  | REGISTER of (Cabs.cabsloc)
  | THREAD of (Cabs.cabsloc)
  | SIZEOF of (Cabs.cabsloc)
  | ALIGNOF of (Cabs.cabsloc)
  | EQ
  | PLUS_EQ
  | MINUS_EQ
  | STAR_EQ
  | SLASH_EQ
  | PERCENT_EQ
  | AND_EQ
  | PIPE_EQ
  | CIRC_EQ
  | INF_INF_EQ
  | SUP_SUP_EQ
  | ARROW
  | DOT
  | EQ_EQ
  | EXCLAM_EQ
  | INF
  | SUP
  | INF_EQ
  | SUP_EQ
  | PLUS of (Cabs.cabsloc)
  | MINUS of (Cabs.cabsloc)
  | STAR of (Cabs.cabsloc)
  | SLASH
  | PERCENT
  | TILDE of (Cabs.cabsloc)
  | AND of (Cabs.cabsloc)
  | PIPE
  | CIRC
  | EXCLAM of (Cabs.cabsloc)
  | AND_AND of (Cabs.cabsloc)
  | PIPE_PIPE
  | INF_INF
  | SUP_SUP
  | PLUS_PLUS of (Cabs.cabsloc)
  | MINUS_MINUS of (Cabs.cabsloc)
  | RPAREN
  | LPAREN of (Cabs.cabsloc)
  | RBRACE of (Cabs.cabsloc)
  | LBRACE of (Cabs.cabsloc)
  | LBRACKET
  | RBRACKET
  | COLON
  | SEMICOLON of (Cabs.cabsloc)
  | COMMA
  | ELLIPSIS
  | QUEST
  | BREAK of (Cabs.cabsloc)
  | CONTINUE of (Cabs.cabsloc)
  | GOTO of (Cabs.cabsloc)
  | RETURN of (Cabs.cabsloc)
  | SWITCH of (Cabs.cabsloc)
  | CASE of (Cabs.cabsloc)
  | DEFAULT of (Cabs.cabsloc)
  | WHILE of (Cabs.cabsloc)
  | DO of (Cabs.cabsloc)
  | FOR of (Cabs.cabsloc)
  | IF of (Cabs.cabsloc)
  | TRY of (Cabs.cabsloc)
  | EXCEPT of (Cabs.cabsloc)
  | FINALLY of (Cabs.cabsloc)
  | ELSE
  | ATTRIBUTE of (Cabs.cabsloc)
  | INLINE of (Cabs.cabsloc)
  | ASM of (Cabs.cabsloc)
  | TYPEOF of (Cabs.cabsloc)
  | FUNCTION__ of (Cabs.cabsloc)
  | PRETTY_FUNCTION__ of (Cabs.cabsloc)
  | LABEL__
  | BUILTIN_VA_ARG of (Cabs.cabsloc)
  | ATTRIBUTE_USED of (Cabs.cabsloc)
  | BUILTIN_VA_LIST
  | BLOCKATTRIBUTE
  | BUILTIN_TYPES_COMPAT of (Cabs.cabsloc)
  | BUILTIN_OFFSETOF of (Cabs.cabsloc)
  | DECLSPEC of (Cabs.cabsloc)
  | MSASM of (string * Cabs.cabsloc)
  | MSATTR of (string * Cabs.cabsloc)
  | PRAGMA_LINE of (string * Cabs.cabsloc)
  | PRAGMA of (Cabs.cabsloc)
  | PRAGMA_EOL
  | AT_TRANSFORM of (Cabs.cabsloc)
  | AT_TRANSFORMEXPR of (Cabs.cabsloc)
  | AT_SPECIFIER of (Cabs.cabsloc)
  | AT_EXPR of (Cabs.cabsloc)
  | AT_NAME

open Parsing;;
# 44 "src/frontc/cparser.mly"
open Cabs
open Cabshelper
module E = Errormsg

let parse_error msg : unit =       (* sm: c++-mode highlight hack: -> ' <- *)
  E.parse_error msg

let print = print_string

(* unit -> string option *)
(*
let getComments () =
  match !comments with
    [] -> None
  | _ -> 
      let r = Some(String.concat "\n" (List.rev !comments)) in
      comments := [];
      r
*)

let cabslu = {lineno = -10; 
	      filename = "cabs loc unknown"; 
	      byteno = -10;
              ident = 0;}

(* cabsloc -> cabsloc *)
(*
let handleLoc l =
  l.clcomment <- getComments();
  l
*)

(*
** Expression building
*)
let smooth_expression lst =
  match lst with
    [] -> NOTHING
  | [expr] -> expr
  | _ -> COMMA (lst)


let currentFunctionName = ref "<outside any function>"
    
let announceFunctionName ((n, decl, _, _):name) =
  !Lexerhack.add_identifier n;
  (* Start a context that includes the parameter names and the whole body. 
   * Will pop when we finish parsing the function body *)
  !Lexerhack.push_context ();
  (* Go through all the parameter names and mark them as identifiers *)
  let rec findProto = function
      PROTO (d, args, _) when isJUSTBASE d -> 
        List.iter (fun (_, (an, _, _, _)) -> !Lexerhack.add_identifier an) args

    | PROTO (d, _, _) -> findProto d
    | PARENTYPE (_, d, _) -> findProto d
    | PTR (_, d) -> findProto d
    | ARRAY (d, _, _) -> findProto d
    | _ -> parse_error "Cannot find the prototype in a function definition";
           raise Parsing.Parse_error 

  and isJUSTBASE = function
      JUSTBASE -> true
    | PARENTYPE (_, d, _) -> isJUSTBASE d
    | _ -> false
  in
  findProto decl;
  currentFunctionName := n



let applyPointer (ptspecs: attribute list list) (dt: decl_type)  
       : decl_type = 
  (* Outer specification first *)
  let rec loop = function
      [] -> dt
    | attrs :: rest -> PTR(attrs, loop rest)
  in
  loop ptspecs

let doDeclaration (loc: cabsloc) (specs: spec_elem list) (nl: init_name list) : definition = 
  if isTypedef specs then begin
    (* Tell the lexer about the new type names *)
    List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_type n) nl;
    TYPEDEF ((specs, List.map (fun (n, _) -> n) nl), loc)
  end else
    if nl = [] then
      ONLYTYPEDEF (specs, loc)
    else begin
      (* Tell the lexer about the new variable names *)
      List.iter (fun ((n, _, _, _), _) -> !Lexerhack.add_identifier n) nl;
      DECDEF ((specs, nl), loc)  
    end


let doFunctionDef (loc: cabsloc)
                  (lend: cabsloc)
                  (specs: spec_elem list) 
                  (n: name) 
                  (b: block) : definition = 
  let fname = (specs, n) in
  FUNDEF (fname, b, loc, lend)


let doOldParDecl (names: string list)
                 ((pardefs: name_group list), (isva: bool)) 
    : single_name list * bool =
  let findOneName n =
    (* Search in pardefs for the definition for this parameter *)
    let rec loopGroups = function
        [] -> ([SpecType Tint], (n, JUSTBASE, [], cabslu))
      | (specs, names) :: restgroups ->
          let rec loopNames = function
              [] -> loopGroups restgroups
            | ((n',_, _, _) as sn) :: _ when n' = n -> (specs, sn)
            | _ :: restnames -> loopNames restnames
          in
          loopNames names
    in
    loopGroups pardefs
  in
  let args = List.map findOneName names in
  (args, isva)

let checkConnective (s : string) : unit =
begin
  (* checking this means I could possibly have more connectives, with *)
  (* different meaning *)
  if (s <> "to") then (
    parse_error "transformer connective must be 'to'";
    raise Parsing.Parse_error
  )
  else ()
end

let int64_to_char value =
  if (compare value (Int64.of_int 255) > 0) || (compare value Int64.zero < 0) then
    begin
      let msg = Printf.sprintf "cparser:intlist_to_string: character 0x%Lx too big" value in
      parse_error msg;
      raise Parsing.Parse_error
    end
  else
    Char.chr (Int64.to_int value)

(* takes a not-nul-terminated list, and converts it to a string. *)
let rec intlist_to_string (str: int64 list):string =
  match str with
    [] -> ""  (* add nul-termination *)
  | value::rest ->
      let this_char = int64_to_char value in
      (String.make 1 this_char) ^ (intlist_to_string rest)

let fst3 (result, _, _) = result
let snd3 (_, result, _) = result
let trd3 (_, _, result) = result


(*
   transform:  __builtin_offsetof(type, member)
   into     :  (size_t) (&(type * ) 0)->member
 *)

let transformOffsetOf (speclist, dtype) member =
  let rec addPointer = function
    | JUSTBASE ->
	PTR([], JUSTBASE)
    | PARENTYPE (attrs1, dtype, attrs2) ->
	PARENTYPE (attrs1, addPointer dtype, attrs2)
    | ARRAY (dtype, attrs, expr) ->
	ARRAY (addPointer dtype, attrs, expr)
    | PTR (attrs, dtype) ->
	PTR (attrs, addPointer dtype)
    | PROTO (dtype, names, variadic) ->
	PROTO (addPointer dtype, names, variadic)
  in
  let nullType = (speclist, addPointer dtype) in
  let nullExpr = CONSTANT (CONST_INT "0") in
  let castExpr = CAST (nullType, SINGLE_INIT nullExpr) in

  let rec replaceBase = function
    | VARIABLE field ->
	MEMBEROFPTR (castExpr, field)
    | MEMBEROF (base, field) ->
	MEMBEROF (replaceBase base, field)
    | INDEX (base, index) ->
	INDEX (replaceBase base, index)
    | _ ->
	parse_error "malformed offset expression in __builtin_offsetof";
        raise Parsing.Parse_error 
  in
  let memberExpr = replaceBase member in
  let addrExpr = UNARY (ADDROF, memberExpr) in
  (* slight cheat: hard-coded assumption that size_t == unsigned int *)
  let sizeofType = [SpecType Tunsigned], JUSTBASE in
  let resultExpr = CAST (sizeofType, SINGLE_INIT addrExpr) in
  resultExpr

# 323 "src/frontc/cparser.ml"
let yytransl_const = [|
    0 (* EOF *);
  290 (* EQ *);
  291 (* PLUS_EQ *);
  292 (* MINUS_EQ *);
  293 (* STAR_EQ *);
  294 (* SLASH_EQ *);
  295 (* PERCENT_EQ *);
  296 (* AND_EQ *);
  297 (* PIPE_EQ *);
  298 (* CIRC_EQ *);
  299 (* INF_INF_EQ *);
  300 (* SUP_SUP_EQ *);
  301 (* ARROW *);
  302 (* DOT *);
  303 (* EQ_EQ *);
  304 (* EXCLAM_EQ *);
  305 (* INF *);
  306 (* SUP *);
  307 (* INF_EQ *);
  308 (* SUP_EQ *);
  312 (* SLASH *);
  313 (* PERCENT *);
  316 (* PIPE *);
  317 (* CIRC *);
  320 (* PIPE_PIPE *);
  321 (* INF_INF *);
  322 (* SUP_SUP *);
  325 (* RPAREN *);
  329 (* LBRACKET *);
  330 (* RBRACKET *);
  331 (* COLON *);
  333 (* COMMA *);
  334 (* ELLIPSIS *);
  335 (* QUEST *);
  350 (* ELSE *);
  357 (* LABEL__ *);
  360 (* BUILTIN_VA_LIST *);
  361 (* BLOCKATTRIBUTE *);
  369 (* PRAGMA_EOL *);
  374 (* AT_NAME *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* CST_CHAR *);
  259 (* CST_WCHAR *);
  260 (* CST_INT *);
  261 (* CST_FLOAT *);
  262 (* NAMED_TYPE *);
  263 (* CST_STRING *);
  264 (* CST_WSTRING *);
  265 (* CHAR *);
  266 (* INT *);
  267 (* DOUBLE *);
  268 (* FLOAT *);
  269 (* VOID *);
  270 (* INT64 *);
  271 (* INT32 *);
  272 (* ENUM *);
  273 (* STRUCT *);
  274 (* TYPEDEF *);
  275 (* UNION *);
  276 (* SIGNED *);
  277 (* UNSIGNED *);
  278 (* LONG *);
  279 (* SHORT *);
  280 (* VOLATILE *);
  281 (* EXTERN *);
  282 (* STATIC *);
  283 (* CONST *);
  284 (* RESTRICT *);
  285 (* AUTO *);
  286 (* REGISTER *);
  287 (* THREAD *);
  288 (* SIZEOF *);
  289 (* ALIGNOF *);
  309 (* PLUS *);
  310 (* MINUS *);
  311 (* STAR *);
  314 (* TILDE *);
  315 (* AND *);
  318 (* EXCLAM *);
  319 (* AND_AND *);
  323 (* PLUS_PLUS *);
  324 (* MINUS_MINUS *);
  326 (* LPAREN *);
  327 (* RBRACE *);
  328 (* LBRACE *);
  332 (* SEMICOLON *);
  336 (* BREAK *);
  337 (* CONTINUE *);
  338 (* GOTO *);
  339 (* RETURN *);
  340 (* SWITCH *);
  341 (* CASE *);
  342 (* DEFAULT *);
  343 (* WHILE *);
  344 (* DO *);
  345 (* FOR *);
  346 (* IF *);
  347 (* TRY *);
  348 (* EXCEPT *);
  349 (* FINALLY *);
  351 (* ATTRIBUTE *);
  352 (* INLINE *);
  353 (* ASM *);
  354 (* TYPEOF *);
  355 (* FUNCTION__ *);
  356 (* PRETTY_FUNCTION__ *);
  358 (* BUILTIN_VA_ARG *);
  359 (* ATTRIBUTE_USED *);
  362 (* BUILTIN_TYPES_COMPAT *);
  363 (* BUILTIN_OFFSETOF *);
  364 (* DECLSPEC *);
  365 (* MSASM *);
  366 (* MSATTR *);
  367 (* PRAGMA_LINE *);
  368 (* PRAGMA *);
  370 (* AT_TRANSFORM *);
  371 (* AT_TRANSFORMEXPR *);
  372 (* AT_SPECIFIER *);
  373 (* AT_EXPR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\003\000\051\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\055\000\055\000\055\000\056\000\056\000\057\000\057\000\
\057\000\057\000\057\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\059\000\059\000\
\059\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\062\000\
\062\000\063\000\063\000\063\000\063\000\064\000\064\000\064\000\
\065\000\065\000\065\000\066\000\066\000\066\000\066\000\066\000\
\067\000\067\000\067\000\068\000\068\000\069\000\069\000\070\000\
\070\000\071\000\071\000\072\000\072\000\073\000\073\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\011\000\009\000\009\000\009\000\009\000\
\009\000\009\000\010\000\075\000\018\000\018\000\019\000\019\000\
\019\000\076\000\076\000\076\000\013\000\013\000\021\000\021\000\
\060\000\060\000\020\000\020\000\020\000\077\000\077\000\022\000\
\022\000\022\000\023\000\023\000\078\000\016\000\016\000\012\000\
\012\000\014\000\014\000\014\000\079\000\079\000\015\000\015\000\
\017\000\017\000\035\000\035\000\080\000\081\000\081\000\036\000\
\036\000\036\000\036\000\036\000\037\000\037\000\038\000\038\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\083\000\083\000\031\000\031\000\041\000\041\000\040\000\040\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\087\000\087\000\088\000\088\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\026\000\026\000\026\000\026\000\026\000\
\026\000\044\000\044\000\043\000\043\000\043\000\030\000\030\000\
\030\000\029\000\029\000\042\000\045\000\045\000\045\000\045\000\
\045\000\091\000\092\000\092\000\093\000\093\000\093\000\028\000\
\028\000\028\000\028\000\027\000\094\000\094\000\039\000\039\000\
\054\000\054\000\054\000\095\000\095\000\095\000\049\000\050\000\
\050\000\034\000\034\000\048\000\048\000\046\000\046\000\046\000\
\046\000\047\000\047\000\032\000\033\000\033\000\033\000\033\000\
\033\000\052\000\052\000\052\000\005\000\005\000\006\000\006\000\
\006\000\089\000\089\000\089\000\089\000\084\000\084\000\096\000\
\096\000\096\000\096\000\098\000\098\000\090\000\090\000\053\000\
\053\000\053\000\100\000\100\000\100\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\101\000\101\000\101\000\
\101\000\101\000\101\000\102\000\102\000\102\000\102\000\102\000\
\102\000\102\000\102\000\102\000\102\000\102\000\103\000\104\000\
\104\000\104\000\104\000\105\000\105\000\105\000\106\000\106\000\
\106\000\107\000\107\000\107\000\107\000\107\000\108\000\108\000\
\108\000\109\000\109\000\110\000\110\000\111\000\111\000\112\000\
\112\000\113\000\113\000\114\000\114\000\099\000\115\000\115\000\
\115\000\116\000\116\000\082\000\082\000\097\000\097\000\007\000\
\007\000\007\000\085\000\085\000\086\000\086\000\117\000\117\000\
\119\000\119\000\120\000\120\000\118\000\118\000\121\000\121\000\
\122\000\122\000\123\000\123\000\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\000\000\002\000\002\000\000\000\001\000\001\000\
\003\000\005\000\005\000\001\000\006\000\004\000\008\000\008\000\
\003\000\001\000\001\000\004\000\000\000\001\000\001\000\001\000\
\001\000\003\000\004\000\001\000\002\000\004\000\006\000\006\000\
\006\000\003\000\003\000\002\000\002\000\006\000\001\000\003\000\
\002\000\001\000\002\000\002\000\002\000\004\000\002\000\004\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\004\000\001\000\003\000\003\000\003\000\001\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\003\000\003\000\003\000\
\001\000\003\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\005\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\001\000\002\000\
\002\000\001\000\001\000\001\000\001\000\003\000\001\000\003\000\
\000\000\001\000\003\000\002\000\001\000\001\000\000\000\003\000\
\004\000\005\000\000\000\001\000\002\000\000\000\001\000\000\000\
\001\000\001\000\003\000\003\000\000\000\001\000\003\000\003\000\
\003\000\003\000\005\000\003\000\001\000\000\000\002\000\000\000\
\002\000\002\000\002\000\002\000\000\000\004\000\001\000\003\000\
\001\000\002\000\001\000\003\000\005\000\003\000\003\000\005\000\
\008\000\004\000\004\000\006\000\002\000\002\000\003\000\002\000\
\002\000\003\000\004\000\007\000\001\000\005\000\004\000\003\000\
\002\000\001\000\003\000\002\000\001\000\003\000\001\000\003\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\004\000\000\000\001\000\000\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\003\000\005\000\004\000\006\000\005\000\002\000\005\000\
\004\000\006\000\005\000\002\000\006\000\005\000\007\000\006\000\
\001\000\004\000\004\000\000\000\003\000\002\000\004\000\002\000\
\003\000\001\000\003\000\001\000\004\000\002\000\001\000\003\000\
\003\000\001\000\003\000\003\000\001\000\004\000\005\000\005\000\
\004\000\001\000\000\000\002\000\000\000\002\000\003\000\002\000\
\002\000\001\000\003\000\002\000\005\000\003\000\001\000\003\000\
\000\000\004\000\004\000\001\000\003\000\001\000\003\000\000\000\
\001\000\002\000\001\000\003\000\001\000\004\000\003\000\004\000\
\004\000\001\000\000\000\002\000\002\000\002\000\004\000\005\000\
\003\000\001\000\001\000\001\000\000\000\002\000\000\000\002\000\
\005\000\004\000\002\000\001\000\001\000\000\000\002\000\001\000\
\001\000\001\000\001\000\004\000\002\000\001\000\002\000\003\000\
\004\000\001\000\001\000\001\000\003\000\002\000\001\000\001\000\
\001\000\003\000\003\000\003\000\001\000\001\000\003\000\002\000\
\003\000\003\000\004\000\001\000\002\000\004\000\002\000\004\000\
\002\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\003\000\003\000\003\000\001\000\003\000\003\000\001\000\003\000\
\003\000\001\000\003\000\003\000\003\000\003\000\001\000\003\000\
\003\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\005\000\001\000\001\000\003\000\
\003\000\000\000\001\000\003\000\003\000\003\000\003\000\000\000\
\002\000\002\000\001\000\002\000\000\000\003\000\000\000\001\000\
\001\000\003\000\005\000\005\000\000\000\003\000\000\000\003\000\
\000\000\002\000\001\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\233\000\208\000\210\000\214\000\
\213\000\207\000\212\000\000\000\000\000\000\000\000\000\215\000\
\216\000\211\000\209\000\043\001\000\000\000\000\042\001\044\001\
\000\000\000\000\053\001\000\000\000\000\000\000\000\000\000\000\
\000\000\052\001\066\001\000\000\000\000\000\000\000\000\157\001\
\000\000\002\000\000\000\000\000\000\000\007\000\008\000\000\000\
\000\000\000\000\012\000\000\000\158\001\000\000\000\000\018\000\
\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\204\000\193\000\000\000\000\000\
\000\000\114\000\115\000\116\000\000\000\000\000\109\000\194\000\
\195\000\196\000\197\000\005\000\000\000\199\000\000\000\000\000\
\000\000\051\001\000\000\000\000\068\001\077\001\073\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\001\000\000\078\001\000\000\095\001\096\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\126\001\000\000\000\000\000\000\001\000\004\000\000\000\
\188\000\038\001\000\000\000\000\000\000\025\001\000\000\206\000\
\198\000\006\000\149\000\036\001\000\000\000\000\200\000\201\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\247\000\000\000\000\000\061\001\000\000\000\000\000\000\000\000\
\063\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\110\000\000\000\000\000\000\000\023\000\103\000\104\000\101\000\
\102\000\111\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\105\000\000\000\025\000\000\000\000\000\
\000\000\028\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\088\000\
\100\000\000\000\000\000\000\000\070\001\000\000\000\000\080\001\
\000\000\000\000\085\001\000\000\087\001\089\001\090\001\091\001\
\094\001\092\001\093\001\000\000\000\000\000\000\064\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\001\057\001\058\001\000\000\056\001\000\000\000\000\187\000\
\000\000\000\000\000\000\253\000\012\001\000\000\000\000\000\000\
\017\000\000\000\014\000\000\000\000\000\008\001\009\001\000\000\
\000\000\000\000\004\001\039\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\238\000\000\000\000\000\
\000\000\000\000\000\000\000\000\220\000\240\000\000\000\000\000\
\000\000\225\000\000\000\000\000\000\000\000\000\000\000\000\000\
\131\001\000\000\050\001\000\000\000\000\045\000\000\000\047\000\
\049\000\050\000\051\000\054\000\052\000\053\000\055\000\000\000\
\043\000\044\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\234\000\113\000\112\000\026\001\000\000\
\235\000\000\000\000\000\036\000\037\000\000\000\000\000\029\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\133\001\000\000\
\000\000\132\001\079\001\074\001\075\001\000\000\000\000\069\001\
\076\001\065\001\081\001\082\001\000\000\097\001\098\001\099\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\202\000\023\001\046\001\190\000\000\000\117\000\
\192\000\000\000\000\000\000\000\000\000\252\000\000\000\000\000\
\148\000\000\000\000\000\000\000\000\000\016\001\000\000\000\000\
\011\001\000\000\000\000\000\000\000\000\006\001\000\000\251\000\
\249\000\248\000\230\000\060\001\020\000\000\000\000\000\000\000\
\241\000\246\000\237\000\000\000\000\000\000\000\219\000\222\000\
\000\000\224\000\227\000\000\000\010\000\135\001\134\001\011\000\
\000\000\000\000\000\000\144\000\000\000\000\000\143\000\000\000\
\026\000\000\000\000\000\000\000\000\000\000\000\035\000\034\000\
\000\000\135\000\000\000\000\000\000\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\059\000\060\000\061\000\058\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\137\000\000\000\129\001\128\001\
\000\000\000\000\083\001\000\000\000\000\000\000\000\000\000\000\
\000\000\125\000\000\000\122\000\000\000\000\000\000\000\000\000\
\000\000\014\001\000\000\000\000\000\000\000\000\048\001\000\000\
\000\000\151\000\000\000\000\000\161\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\181\000\000\000\000\000\000\000\163\000\000\000\
\000\000\022\001\000\000\000\000\013\000\000\000\000\000\002\001\
\028\001\000\000\000\000\007\001\229\000\232\000\000\000\000\000\
\243\000\239\000\221\000\226\000\000\000\000\000\000\000\140\000\
\139\000\000\000\057\000\000\000\000\000\000\000\027\000\000\000\
\030\000\146\000\145\000\000\000\125\001\000\000\000\000\000\000\
\000\000\000\000\126\000\000\000\133\000\118\000\124\000\254\000\
\000\000\000\000\142\000\000\000\000\000\001\001\160\000\158\000\
\000\000\000\000\176\000\177\000\000\000\000\000\174\000\000\000\
\000\000\000\000\000\000\173\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\154\000\162\000\153\000\
\147\000\156\000\000\000\000\000\031\001\000\000\000\000\000\000\
\231\000\245\000\000\000\000\000\000\000\039\000\000\000\087\000\
\000\000\000\000\132\000\128\000\000\000\000\000\120\000\123\000\
\013\001\000\001\255\000\000\000\184\000\000\000\000\000\178\000\
\000\000\175\000\000\000\166\000\000\000\000\000\167\000\000\000\
\000\000\000\000\186\000\000\000\000\000\000\000\000\000\137\001\
\138\001\000\000\021\001\018\001\019\001\030\001\033\001\032\001\
\038\000\031\000\032\000\000\000\033\000\041\000\015\000\016\000\
\129\000\000\000\049\001\170\000\055\001\179\000\171\000\000\000\
\000\000\185\000\000\000\000\000\000\000\183\000\108\000\000\000\
\000\000\040\000\130\000\000\000\168\000\000\000\165\000\182\000\
\140\001\000\000\000\000\172\000\000\000\000\000\000\000\000\000\
\145\001\000\000\000\000\000\000\000\000\000\000\142\001\000\000\
\000\000\180\000\169\000\152\001\000\000\146\001\000\000\000\000\
\150\001\000\000\000\000\000\000\154\001\148\001\147\001\000\000\
\156\001"

let yydgoto = "\003\000\
\040\000\041\000\042\000\043\000\020\001\190\001\157\002\076\002\
\203\000\204\000\092\001\028\002\042\002\077\002\206\000\251\001\
\112\001\078\000\207\000\043\002\044\002\045\002\180\002\164\000\
\045\000\165\000\130\000\150\000\153\000\154\000\046\000\047\000\
\048\000\209\000\079\002\080\002\032\001\195\001\147\000\131\000\
\132\000\057\001\058\001\059\001\203\001\204\001\205\001\166\002\
\134\000\060\001\049\000\050\000\166\000\200\001\028\001\047\001\
\210\000\211\000\175\002\047\002\212\000\213\000\214\000\215\000\
\216\000\217\000\218\000\219\000\220\000\221\000\222\000\223\000\
\224\000\225\000\240\002\079\000\124\002\048\002\132\002\141\000\
\197\001\090\000\204\002\190\002\241\002\251\002\080\000\137\000\
\052\000\063\000\191\001\151\000\043\001\029\001\084\002\022\001\
\179\000\064\000\227\000\108\000\109\000\110\000\111\000\112\000\
\113\000\114\000\115\000\116\000\117\000\118\000\119\000\120\000\
\121\000\122\000\228\000\074\001\255\002\007\003\000\003\001\003\
\002\003\017\003\021\003"

let yysindex = "\153\000\
\033\013\033\013\000\000\002\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\218\255\058\000\099\015\073\000\000\000\
\000\000\000\000\000\000\000\000\027\014\099\015\000\000\000\000\
\099\015\099\015\000\000\033\013\021\255\099\015\038\255\073\255\
\124\255\000\000\000\000\214\007\139\255\240\255\255\255\000\000\
\012\001\000\000\033\013\070\255\122\015\000\000\000\000\060\255\
\105\000\099\015\000\000\099\015\000\000\088\000\192\014\000\000\
\000\000\117\000\082\000\124\255\093\000\056\000\251\255\007\255\
\100\010\095\000\113\000\099\015\000\000\000\000\100\010\147\000\
\198\000\000\000\000\000\000\000\219\014\163\255\000\000\000\000\
\000\000\000\000\000\000\000\000\163\000\000\000\163\255\247\009\
\241\015\000\000\027\255\148\000\000\000\000\000\000\000\192\011\
\007\012\214\007\214\007\214\007\214\007\214\007\214\007\214\007\
\154\000\000\000\084\255\000\000\039\255\000\000\000\000\106\001\
\174\255\076\000\215\001\250\000\209\000\212\000\215\000\221\000\
\109\255\000\000\064\013\026\012\034\001\000\000\000\000\128\001\
\000\000\000\000\225\000\219\000\017\001\000\000\025\000\000\000\
\000\000\000\000\000\000\000\000\228\000\246\000\000\000\000\000\
\243\000\255\000\023\001\192\014\044\001\025\001\048\001\076\001\
\000\000\053\001\163\000\000\000\124\001\117\000\117\000\060\001\
\000\000\090\001\100\010\196\255\101\001\100\010\100\010\100\010\
\103\001\111\001\100\010\100\010\112\001\033\013\070\255\000\000\
\000\000\045\016\122\001\132\001\000\000\000\000\000\000\000\000\
\000\000\000\000\097\012\168\012\026\012\026\012\026\012\026\012\
\026\012\026\012\221\001\187\012\187\012\165\005\149\001\151\001\
\157\001\158\001\000\000\000\000\160\001\000\000\038\000\044\001\
\163\001\000\000\206\001\000\000\196\002\113\001\032\001\244\000\
\220\001\041\001\176\001\179\001\183\001\185\001\197\255\000\000\
\000\000\036\255\180\001\191\001\000\000\181\015\015\002\000\000\
\017\002\165\005\000\000\165\005\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\217\001\027\002\177\001\000\000\092\255\
\092\255\214\007\214\007\214\007\214\007\214\007\214\007\214\007\
\214\007\214\007\214\007\214\007\214\007\214\007\214\007\214\007\
\214\007\214\007\214\007\214\007\214\007\222\001\224\001\230\001\
\000\000\000\000\000\000\044\001\000\000\128\001\044\001\000\000\
\232\010\128\001\021\001\000\000\000\000\229\001\034\002\196\001\
\000\000\088\000\000\000\099\015\236\001\000\000\000\000\000\000\
\103\000\054\014\000\000\000\000\026\012\114\001\241\001\004\002\
\006\002\053\001\053\001\117\000\100\010\000\000\026\012\100\010\
\002\002\001\002\008\002\025\000\000\000\000\000\014\002\019\002\
\100\010\000\000\022\002\023\002\100\010\024\002\017\001\241\255\
\000\000\029\002\000\000\010\002\165\005\000\000\165\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\165\005\
\000\000\000\000\070\000\031\002\030\002\032\002\037\002\026\012\
\099\015\099\015\108\002\000\000\000\000\000\000\000\000\042\002\
\000\000\092\255\092\255\000\000\000\000\154\008\225\008\000\000\
\026\012\026\012\026\012\026\012\026\012\026\012\026\012\026\012\
\026\012\026\012\026\012\026\012\026\012\026\012\026\012\026\012\
\026\012\026\012\026\012\026\012\026\012\026\012\026\012\026\012\
\026\012\026\012\026\012\026\012\026\012\154\008\000\000\105\016\
\105\016\000\000\000\000\000\000\000\000\063\002\064\002\000\000\
\000\000\000\000\000\000\000\000\060\002\000\000\000\000\000\000\
\106\001\106\001\174\255\174\255\076\000\076\000\076\000\076\000\
\215\001\215\001\250\000\209\000\212\000\215\000\221\000\067\002\
\134\002\137\002\000\000\000\000\000\000\000\000\181\007\000\000\
\000\000\044\001\088\000\128\001\075\002\000\000\192\014\123\001\
\000\000\069\002\072\002\124\255\047\005\000\000\059\255\074\002\
\000\000\016\001\116\002\227\002\081\002\000\000\025\001\000\000\
\000\000\000\000\000\000\000\000\000\000\084\002\085\002\053\001\
\000\000\000\000\000\000\026\012\086\255\100\010\000\000\000\000\
\089\002\000\000\000\000\113\002\000\000\000\000\000\000\000\000\
\121\002\123\002\124\002\000\000\154\008\154\008\000\000\048\011\
\000\000\114\002\117\002\118\002\127\002\016\001\000\000\000\000\
\120\002\000\000\129\002\222\255\111\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\113\001\113\001\032\001\032\001\
\244\000\244\000\244\000\244\000\220\001\220\001\041\001\176\001\
\179\001\183\001\185\001\130\002\000\000\125\002\000\000\000\000\
\136\002\136\002\000\000\214\007\138\002\146\002\000\000\092\255\
\026\012\000\000\135\002\000\000\172\002\145\002\170\002\232\010\
\154\002\000\000\173\002\244\008\163\255\174\002\000\000\034\002\
\228\000\000\000\120\002\169\002\000\000\176\002\180\002\062\255\
\001\008\175\002\026\012\171\002\175\002\209\006\179\002\175\002\
\060\255\174\000\000\000\047\005\181\002\047\005\000\000\188\002\
\047\005\000\000\184\002\189\002\000\000\197\002\044\001\000\000\
\000\000\192\014\154\008\000\000\000\000\000\000\200\002\128\001\
\000\000\000\000\000\000\000\000\136\002\136\002\136\002\000\000\
\000\000\181\007\000\000\099\015\099\015\092\255\000\000\044\001\
\000\000\000\000\000\000\026\012\000\000\033\013\026\012\065\255\
\109\000\181\007\000\000\232\010\000\000\000\000\000\000\000\000\
\099\015\138\000\000\000\193\002\209\002\000\000\000\000\000\000\
\035\000\042\255\000\000\000\000\219\002\154\008\000\000\220\002\
\059\009\209\006\149\000\000\000\209\006\234\002\226\002\027\006\
\209\006\014\001\174\000\174\000\249\002\000\000\000\000\000\000\
\000\000\000\000\059\255\247\014\000\000\252\002\254\002\250\002\
\000\000\000\000\002\003\006\003\009\003\000\000\062\000\000\000\
\014\003\024\003\000\000\000\000\065\255\026\012\000\000\000\000\
\000\000\000\000\000\000\128\001\000\000\209\006\042\255\000\000\
\023\003\000\000\070\000\000\000\209\006\026\012\000\000\042\255\
\175\002\028\003\000\000\154\008\013\003\175\002\060\255\000\000\
\000\000\102\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\109\003\000\000\000\000\000\000\000\000\
\000\000\050\003\000\000\000\000\000\000\000\000\000\000\051\003\
\052\003\000\000\053\003\209\006\060\255\000\000\000\000\102\003\
\055\003\000\000\000\000\209\006\000\000\154\008\000\000\000\000\
\000\000\063\003\062\003\000\000\069\003\141\003\068\003\070\003\
\000\000\163\255\075\003\209\006\072\003\063\003\000\000\063\003\
\082\003\000\000\000\000\000\000\089\003\000\000\130\009\102\003\
\000\000\088\003\096\003\090\003\000\000\000\000\000\000\102\003\
\000\000"

let yyrindex = "\000\000\
\013\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\102\000\000\000\000\000\
\000\000\000\000\000\000\000\000\089\000\102\000\000\000\000\000\
\102\000\102\000\000\000\017\000\000\000\102\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\216\000\085\000\000\000\000\000\000\000\
\000\000\102\000\000\000\102\000\000\000\084\014\097\003\000\000\
\000\000\000\000\000\000\000\000\000\000\186\001\000\000\207\000\
\098\003\041\002\000\000\102\000\000\000\000\000\098\003\152\002\
\000\000\000\000\000\000\000\000\000\000\175\013\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\174\006\029\007\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\251\002\000\000\000\000\010\023\
\111\023\214\023\140\002\028\002\149\009\127\009\058\003\170\001\
\054\002\000\000\168\003\000\000\000\000\000\000\000\000\208\000\
\000\000\000\000\094\003\000\000\198\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\205\003\000\000\000\000\000\000\
\114\003\061\255\000\000\000\000\051\255\115\003\000\000\128\255\
\000\000\116\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\098\003\216\000\000\000\098\003\098\003\098\003\
\007\003\000\000\098\003\098\003\000\000\032\255\216\000\000\000\
\000\000\120\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\172\016\242\000\
\000\000\000\000\003\017\000\000\246\017\055\018\250\018\189\019\
\249\020\127\021\205\021\027\022\105\022\096\008\005\002\000\000\
\000\000\000\000\121\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\000\000\000\086\003\216\000\000\000\
\000\000\089\255\000\001\000\000\000\000\000\000\000\000\067\004\
\000\000\000\000\000\000\100\255\000\000\000\000\000\000\188\000\
\118\003\000\000\000\000\000\000\000\000\123\003\000\000\000\000\
\000\000\116\003\116\003\000\000\098\003\000\000\000\000\098\003\
\043\001\119\003\000\000\000\000\000\000\000\000\000\000\000\000\
\098\003\000\000\000\000\000\000\098\003\000\000\046\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\125\003\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\118\003\
\000\000\000\000\000\000\000\000\000\000\128\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\124\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\023\078\023\146\023\179\023\247\023\026\024\059\024\094\024\
\132\007\111\010\037\003\002\010\076\010\136\005\167\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\127\003\000\000\
\000\000\216\000\084\014\078\008\000\000\000\000\097\003\067\001\
\000\000\126\003\000\000\000\000\129\003\000\000\216\000\075\255\
\000\000\098\255\159\000\111\000\000\000\000\000\115\003\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\116\003\
\000\000\000\000\000\000\000\000\216\000\098\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\120\018\185\018\059\019\124\019\
\254\019\063\020\128\020\193\020\049\021\105\021\183\021\005\022\
\083\022\161\022\072\009\000\000\000\000\000\000\000\000\000\000\
\198\022\231\022\000\000\000\000\000\000\000\000\145\024\000\000\
\000\000\000\000\130\003\000\000\120\011\000\000\000\000\000\000\
\000\000\000\000\000\000\146\003\000\000\000\000\000\000\000\000\
\205\003\000\000\075\000\191\024\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\169\003\000\000\129\003\000\000\129\003\000\000\000\000\
\129\003\000\000\164\003\000\000\000\000\000\000\196\000\000\000\
\000\000\097\003\146\003\000\000\000\000\000\000\000\000\058\001\
\000\000\000\000\000\000\000\000\090\017\177\017\000\000\000\000\
\000\000\127\003\000\000\000\000\000\000\000\000\000\000\210\000\
\000\000\000\000\000\000\000\000\000\000\032\255\000\000\160\010\
\000\000\127\003\000\000\000\000\000\000\000\000\000\000\000\000\
\076\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\098\006\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\191\024\000\000\165\003\
\000\000\000\000\169\003\169\003\000\000\000\000\000\000\000\000\
\000\000\000\000\216\000\100\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\160\010\000\000\000\000\000\000\
\000\000\000\000\000\000\104\001\000\000\000\000\064\007\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\007\
\000\000\000\000\000\000\165\003\185\004\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\255\
\173\003\000\000\000\000\000\000\000\000\174\003\000\000\000\000\
\000\000\218\000\000\000\000\000\000\000\000\000\175\003\252\255\
\000\000\000\000\000\000\000\000\000\000\218\000\000\000\184\255\
\000\000\000\000\000\000\000\000\176\003\000\000\000\000\000\000\
\000\000\000\000\000\000\177\003\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\245\004\231\255\125\004\004\255\057\003\246\255\132\254\
\000\000\235\255\170\255\140\253\247\254\022\000\020\254\000\000\
\076\002\000\000\000\000\000\000\000\000\184\253\071\002\019\000\
\000\000\224\255\000\000\132\255\204\003\151\255\186\255\000\000\
\000\000\087\255\209\255\027\000\198\002\201\002\017\255\000\000\
\230\003\226\255\000\000\033\003\121\004\000\000\000\000\149\255\
\118\255\234\255\127\255\000\000\003\000\221\253\043\000\240\254\
\000\000\000\000\000\000\090\254\026\000\114\000\013\001\028\001\
\244\001\042\001\132\003\133\003\122\003\134\003\137\003\000\000\
\149\002\059\003\158\254\205\255\000\000\000\000\191\002\000\000\
\000\000\208\255\000\000\079\002\026\002\000\000\228\002\000\000\
\136\255\252\000\002\000\075\254\073\003\000\000\099\002\254\254\
\124\004\000\000\014\000\000\000\000\000\000\000\080\000\190\001\
\193\001\122\002\218\001\019\004\032\004\018\004\031\004\038\004\
\000\000\006\255\115\255\000\000\046\002\000\000\000\000\035\002\
\000\000\000\000\038\002"

let yytablesize = 6670
let yytable = "\077\000\
\140\000\205\000\084\000\051\000\051\000\055\000\176\000\021\001\
\030\001\054\002\040\001\156\000\003\000\133\000\106\000\185\001\
\003\000\127\000\176\001\044\000\044\000\135\000\003\000\037\001\
\192\001\181\001\177\000\229\000\094\001\186\001\051\000\006\000\
\069\000\214\001\215\001\202\002\073\001\015\001\170\000\069\000\
\069\000\039\001\232\000\069\000\069\000\051\000\044\000\179\002\
\069\000\107\000\198\001\024\001\050\001\051\001\062\000\066\000\
\024\001\072\000\082\002\138\000\041\001\044\000\141\002\136\000\
\150\001\180\000\151\001\106\000\069\000\040\001\069\000\054\000\
\027\000\149\000\040\001\017\001\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\248\000\249\000\146\002\069\000\235\002\
\149\002\045\001\085\000\153\002\056\000\185\002\045\001\175\000\
\230\000\057\000\045\001\017\001\103\001\059\000\003\000\045\001\
\143\001\160\000\208\000\087\000\179\002\169\000\040\002\250\000\
\144\001\128\000\060\000\173\000\142\002\244\000\038\001\010\001\
\024\001\235\000\237\000\024\001\128\000\051\000\041\001\010\001\
\213\002\253\002\054\001\139\000\041\001\062\001\063\001\064\001\
\029\000\041\002\067\001\068\001\128\000\044\000\088\000\045\001\
\071\001\129\000\040\001\017\001\070\001\033\000\095\001\034\000\
\045\001\001\000\002\000\102\001\106\000\021\001\045\001\246\000\
\055\001\021\001\021\001\233\001\167\002\234\001\149\000\045\001\
\024\001\074\000\045\001\017\001\012\001\207\001\235\001\017\001\
\051\000\238\000\239\000\240\000\241\000\242\000\243\000\243\001\
\244\001\104\001\095\001\013\001\095\001\192\001\151\001\052\002\
\044\000\089\000\184\001\171\002\247\000\037\001\250\000\095\002\
\192\001\151\002\216\001\051\002\250\000\087\002\045\001\089\002\
\106\000\061\000\123\000\183\002\078\001\080\001\208\001\045\001\
\208\000\030\001\056\000\093\001\233\002\089\001\090\001\057\000\
\218\001\237\002\254\000\255\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\071\001\112\002\128\000\056\000\208\000\180\001\208\000\093\001\
\057\000\093\001\031\002\032\002\141\001\075\000\076\000\157\001\
\067\000\242\001\073\000\126\000\006\000\037\001\055\001\056\001\
\006\000\191\000\191\000\142\001\217\001\196\002\006\000\219\001\
\199\002\056\000\151\001\151\001\205\002\095\001\057\000\095\001\
\225\001\058\000\155\001\156\001\228\001\139\001\127\002\114\002\
\095\001\117\002\237\001\139\001\074\000\101\001\081\001\082\001\
\083\001\084\001\085\001\086\001\024\001\230\001\199\001\124\000\
\059\000\024\001\056\000\161\000\149\000\144\001\045\001\057\000\
\144\001\228\002\159\000\021\001\125\000\060\000\144\001\021\001\
\231\002\056\000\158\001\159\001\160\001\045\001\057\000\061\000\
\045\001\021\001\021\001\021\001\205\000\205\000\138\000\003\000\
\145\000\203\000\205\000\138\000\138\000\138\000\026\001\208\000\
\184\001\208\000\093\001\170\002\093\001\203\000\203\000\056\000\
\142\000\193\001\208\000\220\002\057\000\093\001\189\002\247\002\
\061\000\056\000\184\002\208\000\208\000\152\000\057\000\252\002\
\024\001\024\001\106\000\106\000\024\001\021\001\078\002\158\000\
\024\001\065\000\221\002\250\001\253\001\096\002\111\001\011\003\
\075\000\076\000\236\001\205\000\000\001\001\001\061\000\203\000\
\071\000\006\000\237\001\058\002\247\001\248\001\006\000\155\000\
\059\000\205\000\205\000\049\002\203\000\205\000\203\000\205\000\
\205\000\205\000\157\000\029\002\203\000\060\000\167\000\059\000\
\083\002\024\001\203\000\203\000\202\001\020\003\203\000\061\000\
\203\000\203\000\203\000\045\001\060\000\020\003\181\002\034\001\
\168\000\137\002\182\002\045\001\025\001\098\002\061\000\227\002\
\047\001\025\001\172\002\173\002\024\001\155\002\056\000\081\002\
\156\002\024\001\205\000\057\000\040\001\090\002\203\000\062\001\
\045\001\149\000\121\002\186\002\062\001\045\001\237\001\175\000\
\024\001\184\001\171\000\203\000\061\000\024\001\233\000\197\002\
\151\001\046\002\198\002\047\001\245\000\040\001\061\000\021\001\
\178\000\047\001\047\001\047\001\147\002\009\002\010\002\011\002\
\012\002\012\002\012\002\012\002\012\002\012\002\012\002\012\002\
\012\002\012\002\012\002\012\002\012\002\012\002\012\002\047\001\
\029\001\025\001\104\002\105\002\025\001\078\002\045\001\078\002\
\029\001\024\001\078\002\008\001\024\001\172\000\106\000\086\002\
\009\001\191\002\010\001\184\001\045\001\045\001\062\001\024\001\
\045\001\154\002\024\001\011\001\045\001\024\001\143\001\133\002\
\178\002\047\001\016\001\184\001\143\001\184\001\024\001\017\001\
\006\001\007\001\018\001\019\001\017\001\023\001\027\000\018\001\
\019\001\025\001\025\001\027\000\129\001\130\001\027\001\024\001\
\049\002\024\001\024\001\061\000\151\001\151\001\027\001\034\001\
\041\001\033\001\047\001\021\001\062\001\045\001\191\002\047\001\
\031\001\131\002\035\001\047\001\047\001\024\001\081\002\191\002\
\081\002\203\002\120\002\081\002\127\001\128\001\144\002\135\001\
\136\001\104\001\187\001\036\001\177\002\188\001\175\000\226\002\
\175\000\107\002\128\000\175\000\047\001\042\001\158\002\045\001\
\160\002\206\002\207\002\162\002\149\000\045\001\029\000\232\002\
\131\002\209\001\152\000\029\000\044\001\189\001\244\000\244\000\
\051\000\191\000\191\000\033\000\049\001\034\000\208\000\208\000\
\033\000\046\001\034\000\052\001\083\002\045\001\045\001\047\001\
\044\000\045\001\047\001\013\002\014\002\047\001\047\001\047\001\
\208\002\209\002\017\001\199\001\046\002\018\001\019\001\017\001\
\174\002\027\000\018\001\019\001\015\002\016\002\027\000\238\002\
\251\000\252\000\253\000\193\002\046\002\053\001\093\001\124\001\
\125\001\126\001\175\000\061\001\045\001\029\002\065\001\045\001\
\021\002\022\002\045\001\045\001\045\001\066\001\199\001\069\001\
\019\003\228\000\228\000\161\001\162\001\248\002\075\001\228\000\
\163\001\164\001\228\000\228\000\228\000\228\000\228\000\228\000\
\076\001\228\000\228\000\228\000\228\000\228\000\228\000\228\000\
\228\000\228\000\228\000\228\000\228\000\228\000\228\000\228\000\
\228\000\029\000\096\001\189\001\097\001\087\001\029\000\169\001\
\170\001\029\002\098\001\099\001\100\001\012\002\033\000\105\001\
\034\000\122\001\137\001\033\000\009\003\034\000\122\001\138\001\
\228\000\070\000\139\001\122\001\122\001\122\001\122\001\140\001\
\122\001\081\000\106\001\107\001\082\000\083\000\228\000\228\000\
\145\001\086\000\228\000\146\001\228\000\228\000\228\000\002\001\
\003\001\004\001\005\001\029\002\131\001\132\001\133\001\134\001\
\108\001\109\001\148\001\110\001\149\001\143\000\111\001\144\000\
\228\000\228\000\122\001\228\000\086\000\152\001\153\001\086\000\
\086\000\154\001\194\001\086\000\177\001\228\000\178\001\228\000\
\217\000\217\000\179\001\193\001\196\001\228\000\217\000\228\000\
\201\001\217\000\217\000\217\000\217\000\217\000\217\000\211\001\
\217\000\217\000\217\000\217\000\217\000\217\000\217\000\217\000\
\217\000\217\000\217\000\217\000\217\000\217\000\217\000\217\000\
\212\001\086\000\213\001\086\000\220\001\221\001\086\000\086\000\
\086\000\086\000\086\000\222\001\223\001\232\001\114\001\114\001\
\114\001\224\001\114\001\114\001\226\001\227\001\229\001\217\000\
\114\001\231\001\239\001\086\000\240\001\114\001\114\001\114\001\
\114\001\241\001\114\001\238\001\245\001\217\000\217\000\246\001\
\086\000\217\000\086\000\217\000\217\000\217\000\017\002\018\002\
\019\002\020\002\124\001\165\001\166\001\167\001\168\001\124\001\
\124\001\124\001\124\001\033\002\034\002\035\002\037\002\217\000\
\217\000\038\002\217\000\017\001\114\001\036\002\018\001\019\001\
\053\002\056\002\027\000\057\002\217\000\085\002\217\000\223\000\
\223\000\091\002\093\002\094\002\217\000\223\000\217\000\099\002\
\223\000\223\000\223\000\223\000\223\000\223\000\124\001\223\000\
\223\000\223\000\223\000\223\000\223\000\223\000\223\000\223\000\
\223\000\223\000\223\000\223\000\223\000\223\000\223\000\100\002\
\115\002\088\002\111\001\111\001\188\001\101\002\108\002\102\002\
\103\002\109\002\110\002\111\002\237\001\113\002\111\001\111\001\
\111\001\144\001\111\001\111\001\116\002\123\002\223\000\106\002\
\111\001\118\002\029\000\122\002\189\001\111\001\111\001\111\001\
\111\001\119\002\111\001\125\002\223\000\223\000\128\002\033\000\
\223\000\034\000\223\000\223\000\223\000\113\001\114\001\115\001\
\116\001\117\001\118\001\119\001\120\001\121\001\122\001\123\001\
\126\002\129\002\134\002\138\002\145\002\148\002\223\000\223\000\
\152\002\223\000\017\001\139\002\111\001\018\001\019\001\140\002\
\159\002\027\000\161\002\223\000\163\002\223\000\218\000\218\000\
\164\002\165\002\187\002\223\000\218\000\223\000\169\002\218\000\
\218\000\218\000\218\000\218\000\218\000\188\002\218\000\218\000\
\218\000\218\000\218\000\218\000\218\000\218\000\218\000\218\000\
\218\000\218\000\218\000\218\000\218\000\218\000\192\002\194\002\
\088\002\084\001\084\001\084\001\084\001\084\001\084\001\084\001\
\084\001\084\001\084\001\084\001\200\002\084\001\084\001\084\001\
\201\002\084\001\084\001\084\001\084\001\218\000\210\002\084\001\
\214\002\029\000\215\002\216\002\084\001\084\001\084\001\084\001\
\217\002\084\001\218\002\218\000\218\000\219\002\033\000\218\000\
\034\000\218\000\218\000\218\000\223\002\045\001\045\001\045\001\
\045\001\045\001\045\001\045\001\045\001\045\001\224\002\115\001\
\115\001\115\001\230\002\115\001\115\001\218\000\218\000\234\002\
\218\000\115\001\236\002\084\001\239\002\242\002\115\001\115\001\
\115\001\115\001\218\000\115\001\218\000\045\001\045\001\045\001\
\120\001\120\001\218\000\243\002\218\000\244\002\120\001\245\002\
\246\002\250\002\003\003\120\001\120\001\120\001\120\001\254\002\
\120\001\004\003\045\001\045\001\045\001\005\003\006\003\045\001\
\045\001\012\003\008\003\045\001\045\001\115\001\010\003\015\003\
\045\001\045\001\045\001\045\001\022\003\045\001\045\001\045\001\
\045\001\045\001\045\001\016\003\023\003\003\001\024\003\006\000\
\236\000\189\000\120\001\254\001\255\001\000\002\001\002\002\002\
\003\002\004\002\005\002\006\002\007\002\008\002\015\001\005\001\
\045\001\045\001\021\000\045\001\130\001\127\001\035\001\045\001\
\045\001\022\000\242\000\006\000\134\000\121\000\136\000\152\000\
\119\000\159\000\045\001\045\001\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\141\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\136\001\020\001\
\136\000\141\001\136\000\149\001\153\001\155\001\053\000\014\001\
\055\002\210\001\222\002\225\002\182\001\097\002\136\002\027\001\
\135\002\157\000\157\000\157\000\025\002\211\002\157\000\157\000\
\176\002\249\002\157\000\157\000\023\002\229\002\024\002\157\000\
\157\000\026\002\157\000\157\000\157\000\027\002\048\001\092\002\
\157\000\168\002\171\001\173\001\157\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\157\000\157\000\157\000\
\172\001\174\001\014\003\157\000\157\000\157\000\157\000\157\000\
\157\000\175\001\157\000\013\003\000\000\157\000\157\000\157\000\
\157\000\157\000\157\000\157\000\157\000\025\003\000\000\000\000\
\157\000\157\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\000\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\150\000\
\150\000\150\000\000\000\000\000\150\000\150\000\000\000\000\000\
\150\000\150\000\000\000\000\000\000\000\150\000\150\000\000\000\
\150\000\150\000\150\000\000\000\000\000\000\000\150\000\000\000\
\000\000\000\000\150\000\150\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\150\000\150\000\150\000\000\000\000\000\
\000\000\150\000\150\000\150\000\150\000\150\000\150\000\000\000\
\150\000\000\000\000\000\000\000\150\000\150\000\150\000\150\000\
\150\000\150\000\150\000\000\000\000\000\000\000\150\000\150\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\000\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\164\000\164\000\164\000\
\000\000\000\000\164\000\164\000\000\000\000\000\164\000\164\000\
\000\000\000\000\000\000\164\000\164\000\000\000\164\000\164\000\
\164\000\000\000\000\000\000\000\164\000\000\000\000\000\000\000\
\164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\164\000\164\000\164\000\000\000\000\000\000\000\164\000\
\164\000\164\000\164\000\164\000\164\000\000\000\164\000\000\000\
\000\000\000\000\164\000\164\000\164\000\164\000\164\000\164\000\
\164\000\000\000\000\000\000\000\164\000\164\000\059\002\060\002\
\182\000\183\000\184\000\185\000\005\000\074\000\186\000\006\000\
\007\000\008\000\009\000\010\000\011\000\000\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\068\000\
\022\000\023\000\024\000\025\000\026\000\027\000\187\000\188\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\189\000\190\000\191\000\000\000\000\000\
\192\000\193\000\000\000\000\000\194\000\195\000\000\000\000\000\
\000\000\196\000\197\000\000\000\198\000\000\000\139\000\000\000\
\000\000\000\000\061\002\000\000\000\000\000\000\062\002\063\002\
\064\002\065\002\066\002\067\002\068\002\069\002\070\002\071\002\
\072\002\073\002\000\000\000\000\000\000\029\000\030\000\074\002\
\032\000\075\000\076\000\000\000\199\000\000\000\000\000\000\000\
\200\000\201\000\033\000\075\002\034\000\035\000\036\000\000\000\
\000\000\000\000\039\000\202\000\091\001\181\000\182\000\183\000\
\184\000\185\000\005\000\074\000\186\000\006\000\007\000\008\000\
\009\000\010\000\011\000\000\000\012\000\013\000\014\000\015\000\
\016\000\017\000\018\000\019\000\020\000\068\000\022\000\023\000\
\024\000\025\000\026\000\027\000\187\000\188\000\121\001\121\001\
\000\000\000\000\000\000\000\000\121\001\000\000\000\000\000\000\
\000\000\121\001\121\001\121\001\121\001\000\000\121\001\000\000\
\000\000\189\000\190\000\191\000\000\000\000\000\192\000\193\000\
\000\000\000\000\194\000\195\000\000\000\000\000\123\001\196\000\
\197\000\000\000\198\000\123\001\139\000\000\000\000\000\000\000\
\123\001\123\001\123\001\123\001\000\000\123\001\000\000\000\000\
\121\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\030\000\000\000\032\000\075\000\
\076\000\000\000\199\000\000\000\000\000\000\000\200\000\201\000\
\033\000\000\000\034\000\000\000\000\000\000\000\000\000\123\001\
\039\000\202\000\249\001\181\000\182\000\183\000\184\000\185\000\
\005\000\074\000\186\000\006\000\007\000\008\000\009\000\010\000\
\011\000\000\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\068\000\022\000\023\000\024\000\025\000\
\026\000\027\000\187\000\188\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\189\000\
\190\000\191\000\000\000\000\000\192\000\193\000\000\000\000\000\
\194\000\195\000\000\000\000\000\000\000\196\000\197\000\000\000\
\198\000\054\001\054\001\054\001\054\001\054\001\054\001\000\000\
\054\001\054\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\030\000\000\000\032\000\075\000\076\000\000\000\
\199\000\054\001\054\001\000\000\200\000\201\000\033\000\000\000\
\034\000\000\000\000\000\000\000\000\000\000\000\039\000\202\000\
\000\000\000\000\000\000\000\000\000\000\000\000\054\001\054\001\
\054\001\000\000\000\000\054\001\054\001\000\000\000\000\054\001\
\054\001\000\000\000\000\000\000\054\001\054\001\000\000\054\001\
\155\000\054\001\000\000\000\000\000\000\054\001\000\000\000\000\
\000\000\054\001\054\001\054\001\054\001\054\001\054\001\054\001\
\054\001\054\001\054\001\054\001\054\001\000\000\000\000\000\000\
\000\000\000\000\054\001\000\000\054\001\054\001\000\000\054\001\
\000\000\000\000\000\000\054\001\054\001\000\000\054\001\000\000\
\059\002\150\002\182\000\183\000\184\000\185\000\054\001\074\000\
\186\000\000\000\067\001\067\001\067\001\067\001\067\001\067\001\
\067\001\067\001\067\001\067\001\067\001\067\001\067\001\000\000\
\067\001\067\001\067\001\000\000\067\001\067\001\067\001\067\001\
\187\000\188\000\067\001\000\000\000\000\000\000\067\001\067\001\
\067\001\067\001\067\001\000\000\067\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\189\000\190\000\191\000\
\000\000\000\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\000\000\196\000\197\000\000\000\198\000\000\000\
\139\000\000\000\000\000\000\000\061\002\000\000\067\001\000\000\
\062\002\063\002\064\002\065\002\066\002\067\002\068\002\069\002\
\070\002\071\002\072\002\073\002\000\000\000\000\000\000\000\000\
\000\000\074\002\000\000\075\000\076\000\000\000\199\000\000\000\
\000\000\000\000\200\000\201\000\000\000\075\002\000\000\054\001\
\054\001\054\001\054\001\054\001\054\001\202\000\054\001\054\001\
\000\000\071\001\071\001\071\001\071\001\071\001\071\001\071\001\
\071\001\071\001\071\001\071\001\071\001\071\001\000\000\071\001\
\071\001\071\001\000\000\071\001\071\001\071\001\071\001\054\001\
\054\001\071\001\000\000\000\000\000\000\071\001\071\001\000\000\
\071\001\071\001\000\000\071\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\054\001\054\001\054\001\000\000\
\000\000\054\001\054\001\000\000\000\000\054\001\054\001\000\000\
\000\000\000\000\054\001\054\001\000\000\054\001\000\000\054\001\
\000\000\000\000\000\000\054\001\000\000\071\001\000\000\054\001\
\054\001\054\001\054\001\054\001\054\001\054\001\054\001\054\001\
\054\001\054\001\054\001\000\000\000\000\000\000\000\000\000\000\
\054\001\000\000\054\001\054\001\000\000\054\001\000\000\000\000\
\000\000\054\001\054\001\000\000\054\001\000\000\000\000\000\000\
\000\000\000\000\112\001\112\001\054\001\039\002\182\000\183\000\
\184\000\185\000\057\000\074\000\186\000\000\000\112\001\112\001\
\112\001\000\000\112\001\112\001\000\000\000\000\000\000\000\000\
\112\001\000\000\000\000\000\000\000\000\112\001\112\001\112\001\
\112\001\000\000\112\001\000\000\187\000\188\000\091\000\000\000\
\000\000\092\000\000\000\093\000\074\000\000\000\000\000\000\000\
\000\000\000\000\040\002\000\000\000\000\000\000\000\000\000\000\
\000\000\189\000\190\000\191\000\000\000\094\000\192\000\193\000\
\095\000\000\000\194\000\195\000\112\001\096\000\097\000\196\000\
\197\000\000\000\198\000\000\000\183\001\041\002\000\000\000\000\
\249\001\181\000\182\000\183\000\184\000\185\000\000\000\074\000\
\186\000\000\000\098\000\099\000\100\000\000\000\000\000\101\000\
\102\000\000\000\000\000\103\000\000\000\000\000\000\000\075\000\
\076\000\000\000\199\000\104\000\000\000\000\000\200\000\201\000\
\187\000\188\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\202\000\061\000\105\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\189\000\190\000\191\000\
\075\000\076\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\000\000\196\000\197\000\000\000\198\000\000\000\
\000\000\000\000\000\000\000\000\143\002\045\001\045\001\045\001\
\045\001\045\001\045\001\000\000\045\001\045\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\076\000\000\000\199\000\000\000\
\000\000\000\000\200\000\201\000\000\000\045\001\045\001\000\000\
\000\000\000\000\000\000\000\000\000\000\202\000\000\000\084\000\
\000\000\000\000\084\000\084\000\000\000\000\000\084\000\000\000\
\000\000\000\000\045\001\045\001\045\001\000\000\000\000\045\001\
\045\001\000\000\000\000\045\001\045\001\000\000\000\000\000\000\
\045\001\045\001\000\000\045\001\000\000\000\000\000\000\045\001\
\000\000\249\001\181\000\182\000\183\000\184\000\185\000\084\000\
\074\000\186\000\000\000\000\000\084\000\000\000\084\000\000\000\
\000\000\084\000\084\000\084\000\084\000\084\000\084\000\000\000\
\045\001\045\001\000\000\045\001\000\000\000\000\000\000\045\001\
\045\001\187\000\188\000\000\000\000\000\000\000\084\000\000\000\
\000\000\000\000\045\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\084\000\000\000\084\000\189\000\190\000\
\191\000\000\000\000\000\192\000\193\000\000\000\000\000\194\000\
\195\000\000\000\000\000\000\000\196\000\197\000\000\000\198\000\
\252\001\181\000\182\000\183\000\184\000\185\000\000\000\074\000\
\186\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\130\002\181\000\182\000\183\000\184\000\
\185\000\000\000\074\000\186\000\075\000\076\000\000\000\199\000\
\187\000\188\000\000\000\200\000\201\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\202\000\000\000\
\000\000\000\000\000\000\187\000\188\000\189\000\190\000\191\000\
\000\000\000\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\000\000\196\000\197\000\000\000\198\000\000\000\
\189\000\190\000\191\000\000\000\000\000\192\000\193\000\000\000\
\000\000\194\000\195\000\000\000\000\000\000\000\196\000\197\000\
\000\000\198\000\195\002\181\000\182\000\183\000\184\000\185\000\
\000\000\074\000\186\000\075\000\076\000\000\000\199\000\000\000\
\000\000\000\000\200\000\201\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\202\000\075\000\076\000\
\000\000\199\000\187\000\188\000\000\000\200\000\201\000\085\000\
\000\000\000\000\085\000\085\000\000\000\000\000\085\000\000\000\
\202\000\000\000\000\000\000\000\000\000\000\000\000\000\189\000\
\190\000\191\000\000\000\000\000\192\000\193\000\000\000\000\000\
\194\000\195\000\000\000\000\000\000\000\196\000\197\000\000\000\
\198\000\018\003\181\000\182\000\183\000\184\000\185\000\085\000\
\074\000\186\000\000\000\000\000\085\000\000\000\085\000\000\000\
\000\000\085\000\085\000\085\000\085\000\085\000\085\000\000\000\
\000\000\000\000\000\000\000\000\000\000\075\000\076\000\000\000\
\199\000\187\000\188\000\000\000\200\000\201\000\085\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\202\000\
\000\000\000\000\000\000\085\000\000\000\085\000\189\000\190\000\
\191\000\000\000\118\001\192\000\193\000\118\001\118\001\194\000\
\195\000\000\000\000\000\118\001\196\000\197\000\000\000\198\000\
\118\001\118\001\118\001\118\001\000\000\118\001\000\000\000\000\
\116\001\116\001\000\000\116\001\116\001\000\000\000\000\000\000\
\000\000\116\001\000\000\000\000\000\000\000\000\116\001\116\001\
\116\001\116\001\000\000\116\001\075\000\076\000\000\000\199\000\
\000\000\000\000\000\000\200\000\201\000\000\000\000\000\118\001\
\000\000\000\000\000\000\000\000\000\000\000\000\202\000\181\000\
\182\000\183\000\184\000\185\000\005\000\074\000\186\000\006\000\
\007\000\008\000\009\000\010\000\011\000\116\001\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\068\000\
\022\000\023\000\024\000\025\000\026\000\027\000\187\000\188\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\189\000\190\000\191\000\000\000\000\000\
\192\000\193\000\000\000\000\000\194\000\195\000\000\000\000\000\
\000\000\196\000\197\000\000\000\198\000\117\001\117\001\000\000\
\117\001\117\001\000\000\000\000\000\000\000\000\117\001\000\000\
\000\000\000\000\000\000\117\001\117\001\117\001\117\001\000\000\
\117\001\000\000\000\000\000\000\000\000\029\000\030\000\000\000\
\032\000\075\000\076\000\000\000\199\000\000\000\000\000\000\000\
\200\000\201\000\033\000\162\000\034\000\000\000\000\000\000\000\
\000\000\005\000\039\000\202\000\006\000\007\000\008\000\009\000\
\010\000\011\000\117\001\012\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\068\000\022\000\023\000\024\000\
\025\000\026\000\027\000\000\000\000\000\000\000\000\000\119\001\
\000\000\000\000\119\001\119\001\000\000\000\000\000\000\000\000\
\119\001\000\000\000\000\000\000\000\000\119\001\119\001\119\001\
\119\001\000\000\119\001\000\000\000\000\113\001\113\001\000\000\
\131\000\131\000\131\000\131\000\131\000\000\000\131\000\131\000\
\000\000\113\001\113\001\113\001\000\000\113\001\113\001\163\000\
\000\000\000\000\000\000\113\001\000\000\000\000\000\000\000\000\
\113\001\113\001\113\001\113\001\119\001\113\001\000\000\131\000\
\131\000\131\000\029\000\030\000\000\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\034\000\035\000\036\000\131\000\131\000\131\000\039\000\
\000\000\131\000\131\000\000\000\000\000\131\000\131\000\113\001\
\000\000\000\000\131\000\131\000\000\000\131\000\000\000\131\000\
\181\000\182\000\183\000\184\000\185\000\000\000\074\000\186\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\131\000\131\000\000\000\131\000\000\000\187\000\
\188\000\131\000\131\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\131\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\189\000\190\000\191\000\000\000\
\000\000\192\000\193\000\000\000\000\000\194\000\195\000\000\000\
\000\000\000\000\196\000\197\000\000\000\198\000\000\000\183\001\
\181\000\182\000\183\000\184\000\185\000\000\000\074\000\186\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\076\000\000\000\199\000\000\000\187\000\
\188\000\200\000\201\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\202\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\189\000\190\000\191\000\000\000\
\000\000\192\000\193\000\000\000\000\000\194\000\195\000\000\000\
\000\000\000\000\196\000\197\000\000\000\198\000\000\000\106\002\
\127\000\127\000\127\000\127\000\127\000\000\000\127\000\127\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\076\000\000\000\199\000\000\000\127\000\
\127\000\200\000\201\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\202\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\127\000\127\000\127\000\000\000\
\000\000\127\000\127\000\000\000\000\000\127\000\127\000\000\000\
\000\000\000\000\127\000\127\000\000\000\127\000\000\000\127\000\
\181\000\182\000\183\000\184\000\185\000\000\000\074\000\186\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\127\000\127\000\000\000\127\000\000\000\187\000\
\188\000\127\000\127\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\127\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\189\000\190\000\191\000\000\000\
\000\000\192\000\193\000\000\000\000\000\194\000\195\000\000\000\
\000\000\000\000\196\000\197\000\000\000\234\000\000\000\181\000\
\182\000\183\000\184\000\185\000\000\000\074\000\186\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\181\000\182\000\183\000\184\000\185\000\000\000\
\074\000\186\000\075\000\076\000\000\000\199\000\187\000\188\000\
\000\000\200\000\201\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\202\000\000\000\000\000\000\000\
\000\000\187\000\188\000\189\000\190\000\191\000\000\000\000\000\
\192\000\193\000\000\000\000\000\194\000\195\000\000\000\000\000\
\000\000\196\000\197\000\000\000\236\000\000\000\189\000\190\000\
\191\000\000\000\000\000\192\000\193\000\000\000\000\000\194\000\
\195\000\000\000\000\000\000\000\196\000\197\000\000\000\198\000\
\000\000\181\000\182\000\183\000\184\000\185\000\000\000\074\000\
\186\000\075\000\076\000\000\000\199\000\000\000\000\000\000\000\
\200\000\201\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\202\000\075\000\076\000\000\000\199\000\
\187\000\188\000\000\000\200\000\201\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\202\000\000\000\
\000\000\000\000\000\000\000\000\000\000\189\000\190\000\191\000\
\000\000\000\000\192\000\193\000\000\000\000\000\194\000\195\000\
\000\000\000\000\000\000\196\000\197\000\000\000\077\001\000\000\
\181\000\182\000\183\000\184\000\185\000\000\000\074\000\186\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\181\000\182\000\183\000\184\000\185\000\
\000\000\074\000\186\000\075\000\076\000\000\000\199\000\187\000\
\188\000\000\000\200\000\201\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\202\000\000\000\000\000\
\000\000\000\000\187\000\188\000\189\000\190\000\191\000\000\000\
\000\000\192\000\193\000\000\000\000\000\194\000\195\000\000\000\
\000\000\000\000\196\000\197\000\000\000\079\001\000\000\189\000\
\190\000\191\000\000\000\000\000\192\000\193\000\000\000\000\000\
\194\000\195\000\000\000\000\000\000\000\196\000\197\000\000\000\
\088\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\076\000\000\000\199\000\000\000\000\000\
\000\000\200\000\201\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\202\000\075\000\076\000\000\000\
\199\000\004\000\000\000\000\000\200\000\201\000\005\000\000\000\
\000\000\006\000\007\000\008\000\009\000\010\000\011\000\202\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\004\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\
\006\000\007\000\008\000\009\000\010\000\011\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029\000\
\030\000\031\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\034\000\035\000\
\036\000\000\000\037\000\038\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\030\000\
\031\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\034\000\035\000\036\000\
\000\000\037\000\038\000\039\000\107\000\000\000\000\000\107\000\
\107\000\107\000\107\000\107\000\107\000\000\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\000\000\000\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\000\000\107\000\107\000\107\000\000\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\107\000\107\000\
\107\000\107\000\107\000\107\000\107\000\107\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\107\000\107\000\000\000\
\107\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\107\000\000\000\107\000\000\000\000\000\107\000\
\005\000\074\000\107\000\006\000\007\000\008\000\009\000\010\000\
\011\000\000\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\068\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\005\000\000\000\000\000\006\000\007\000\
\008\000\009\000\010\000\011\000\000\000\012\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\068\000\022\000\
\023\000\024\000\025\000\026\000\027\000\000\000\000\000\000\000\
\000\000\002\001\000\000\000\000\002\001\002\001\002\001\002\001\
\002\001\002\001\000\000\002\001\002\001\002\001\002\001\002\001\
\002\001\002\001\002\001\002\001\002\001\002\001\002\001\002\001\
\002\001\002\001\002\001\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\030\000\148\000\032\000\075\000\076\000\000\000\
\000\000\000\000\000\000\206\001\000\000\000\000\033\000\000\000\
\034\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\029\000\030\000\000\000\032\000\
\002\001\002\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\001\002\001\000\000\002\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\
\000\000\002\001\000\000\000\000\000\000\005\000\000\000\002\001\
\006\000\007\000\008\000\009\000\010\000\011\000\000\000\012\000\
\013\000\014\000\015\000\016\000\017\000\018\000\019\000\020\000\
\068\000\022\000\023\000\024\000\025\000\026\000\027\000\000\000\
\005\000\000\000\000\000\006\000\007\000\008\000\009\000\010\000\
\011\000\000\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\068\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\000\000\005\000\000\000\000\000\006\000\
\007\000\008\000\009\000\010\000\011\000\148\000\012\000\013\000\
\014\000\015\000\016\000\017\000\018\000\019\000\020\000\068\000\
\022\000\023\000\024\000\025\000\026\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\030\000\
\000\000\032\000\174\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\034\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
\000\000\029\000\030\000\000\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\212\002\000\000\033\000\000\000\
\034\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\030\000\000\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\034\000\000\000\000\000\000\000\
\005\000\000\000\039\000\006\000\007\000\008\000\009\000\010\000\
\011\000\000\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\068\000\022\000\023\000\024\000\025\000\
\026\000\027\000\006\000\007\000\008\000\009\000\010\000\011\000\
\000\000\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\068\000\022\000\023\000\024\000\025\000\026\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\226\000\091\000\000\000\000\000\
\092\000\000\000\093\000\074\000\000\000\000\000\000\000\000\000\
\000\000\029\000\030\000\000\000\032\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\094\000\000\000\033\000\095\000\
\034\000\000\000\000\000\000\000\096\000\097\000\039\000\000\000\
\029\000\030\000\000\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\034\000\
\000\000\098\000\099\000\100\000\000\000\039\000\101\000\102\000\
\226\000\091\000\103\000\000\000\092\000\000\000\093\000\074\000\
\000\000\147\001\104\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\094\000\000\000\105\000\095\000\000\000\000\000\000\000\000\000\
\096\000\097\000\000\000\000\000\000\000\000\000\000\000\075\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\098\000\099\000\100\000\
\000\000\000\000\101\000\102\000\072\001\091\000\103\000\000\000\
\092\000\000\000\093\000\074\000\000\000\000\000\104\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\094\000\000\000\105\000\095\000\
\000\000\000\000\000\000\000\000\096\000\097\000\000\000\000\000\
\000\000\000\000\000\000\075\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\098\000\099\000\100\000\000\000\000\000\101\000\102\000\
\030\002\091\000\103\000\000\000\092\000\000\000\093\000\074\000\
\000\000\000\000\104\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\094\000\000\000\105\000\095\000\000\000\000\000\000\000\000\000\
\096\000\097\000\000\000\000\000\000\000\000\000\000\000\075\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\098\000\099\000\100\000\
\000\000\000\000\101\000\102\000\000\000\000\000\103\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\105\000\000\000\
\000\000\000\000\000\000\106\000\000\000\000\000\106\000\106\000\
\000\000\000\000\106\000\075\000\076\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\106\000\106\000\000\000\106\000\106\000\
\106\000\000\000\106\000\106\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\000\000\106\000\106\000\106\000\106\000\
\106\000\106\000\106\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\106\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\106\000\
\000\000\106\000\042\000\000\000\106\000\042\000\042\000\000\000\
\000\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\042\000\042\000\042\000\
\000\000\042\000\042\000\042\000\042\000\000\000\000\000\042\000\
\000\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\042\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\
\042\000\046\000\000\000\042\000\046\000\046\000\000\000\000\000\
\046\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\000\000\000\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\000\000\046\000\046\000\046\000\000\000\
\046\000\046\000\046\000\046\000\000\000\000\000\046\000\000\000\
\046\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\046\000\
\048\000\000\000\046\000\048\000\048\000\000\000\000\000\048\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\000\000\000\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\048\000\048\000\048\000\000\000\048\000\
\048\000\048\000\048\000\000\000\000\000\048\000\000\000\048\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\048\000\
\058\000\058\000\000\000\000\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\048\000\000\000\
\000\000\048\000\000\000\000\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\000\000\
\058\000\058\000\058\000\000\000\058\000\058\000\058\000\058\000\
\000\000\000\000\058\000\000\000\058\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\062\000\000\000\
\000\000\062\000\062\000\000\000\058\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\058\000\000\000\058\000\000\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\000\000\000\000\000\000\
\000\000\062\000\062\000\062\000\000\000\062\000\062\000\062\000\
\062\000\000\000\000\000\062\000\000\000\062\000\000\000\000\000\
\062\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000\
\000\000\000\000\063\000\063\000\000\000\062\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\000\000\062\000\000\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\000\000\000\000\
\000\000\000\000\063\000\063\000\063\000\000\000\063\000\063\000\
\063\000\063\000\000\000\000\000\063\000\000\000\063\000\000\000\
\000\000\063\000\063\000\063\000\063\000\063\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\064\000\000\000\000\000\064\000\064\000\000\000\063\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\063\000\000\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\000\000\
\000\000\000\000\000\000\064\000\064\000\064\000\000\000\064\000\
\064\000\064\000\064\000\000\000\000\000\064\000\000\000\064\000\
\000\000\000\000\064\000\064\000\064\000\064\000\064\000\064\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\000\000\000\000\065\000\065\000\000\000\064\000\
\065\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\064\000\000\000\064\000\000\000\
\065\000\065\000\065\000\065\000\065\000\065\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\000\065\000\065\000\000\000\
\065\000\065\000\065\000\065\000\000\000\000\000\065\000\000\000\
\065\000\000\000\000\000\065\000\065\000\065\000\065\000\065\000\
\065\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\066\000\000\000\000\000\066\000\066\000\000\000\
\065\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\000\000\065\000\
\000\000\066\000\066\000\066\000\066\000\066\000\066\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\066\000\066\000\
\000\000\066\000\066\000\066\000\066\000\000\000\000\000\066\000\
\000\000\066\000\000\000\000\000\066\000\066\000\066\000\066\000\
\066\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\000\000\000\000\067\000\067\000\
\000\000\066\000\067\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\000\000\
\066\000\000\000\067\000\067\000\067\000\067\000\067\000\067\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\067\000\
\067\000\000\000\067\000\067\000\067\000\067\000\000\000\000\000\
\067\000\000\000\067\000\000\000\000\000\067\000\067\000\067\000\
\067\000\067\000\067\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\068\000\000\000\000\000\068\000\
\068\000\000\000\067\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\000\000\067\000\000\000\068\000\068\000\068\000\068\000\068\000\
\068\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\068\000\068\000\000\000\068\000\068\000\000\000\000\000\000\000\
\000\000\068\000\000\000\068\000\000\000\000\000\068\000\068\000\
\068\000\068\000\068\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\
\069\000\069\000\000\000\068\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\068\000\000\000\068\000\000\000\069\000\069\000\069\000\069\000\
\069\000\069\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\000\069\000\069\000\000\000\069\000\069\000\000\000\000\000\
\000\000\000\000\069\000\000\000\069\000\000\000\000\000\069\000\
\069\000\069\000\069\000\069\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\000\000\000\
\000\000\070\000\070\000\000\000\069\000\070\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\069\000\000\000\069\000\000\000\070\000\070\000\070\000\
\070\000\070\000\070\000\000\000\000\000\000\000\000\000\000\000\
\000\000\070\000\070\000\070\000\000\000\070\000\070\000\000\000\
\000\000\000\000\000\000\070\000\000\000\070\000\000\000\000\000\
\070\000\070\000\070\000\070\000\070\000\070\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\
\000\000\000\000\071\000\071\000\000\000\070\000\071\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\070\000\000\000\070\000\000\000\071\000\071\000\
\071\000\071\000\071\000\071\000\000\000\000\000\000\000\000\000\
\000\000\000\000\071\000\071\000\071\000\000\000\071\000\071\000\
\000\000\000\000\000\000\000\000\071\000\000\000\071\000\000\000\
\000\000\071\000\071\000\071\000\071\000\071\000\071\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\000\000\000\000\072\000\072\000\000\000\071\000\072\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\000\000\071\000\000\000\072\000\
\072\000\072\000\072\000\072\000\072\000\000\000\000\000\000\000\
\000\000\000\000\000\000\072\000\072\000\072\000\000\000\072\000\
\072\000\000\000\000\000\000\000\000\000\072\000\000\000\072\000\
\000\000\000\000\072\000\072\000\072\000\072\000\072\000\072\000\
\073\000\000\000\000\000\073\000\073\000\000\000\000\000\073\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\
\073\000\000\000\000\000\000\000\072\000\000\000\072\000\000\000\
\000\000\000\000\000\000\073\000\073\000\073\000\000\000\073\000\
\073\000\000\000\000\000\000\000\000\000\073\000\000\000\073\000\
\000\000\000\000\073\000\073\000\073\000\073\000\073\000\073\000\
\074\000\000\000\000\000\074\000\074\000\000\000\000\000\074\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\000\
\074\000\000\000\000\000\000\000\073\000\000\000\073\000\000\000\
\000\000\000\000\000\000\074\000\074\000\074\000\000\000\074\000\
\074\000\000\000\000\000\000\000\000\000\074\000\000\000\074\000\
\000\000\000\000\074\000\074\000\074\000\074\000\074\000\074\000\
\075\000\000\000\000\000\075\000\075\000\000\000\000\000\075\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\000\
\000\000\000\000\000\000\000\000\000\000\000\000\076\000\075\000\
\075\000\076\000\076\000\000\000\074\000\076\000\074\000\000\000\
\000\000\000\000\000\000\075\000\075\000\075\000\000\000\075\000\
\075\000\000\000\000\000\000\000\000\000\075\000\000\000\075\000\
\000\000\000\000\075\000\075\000\075\000\075\000\075\000\075\000\
\000\000\076\000\076\000\076\000\000\000\076\000\076\000\000\000\
\000\000\000\000\000\000\076\000\000\000\076\000\000\000\075\000\
\076\000\076\000\076\000\076\000\076\000\076\000\077\000\000\000\
\000\000\077\000\077\000\000\000\075\000\077\000\075\000\000\000\
\000\000\000\000\000\000\000\000\000\000\076\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\000\000\000\000\078\000\
\078\000\000\000\076\000\078\000\076\000\000\000\000\000\000\000\
\000\000\077\000\077\000\077\000\000\000\077\000\077\000\000\000\
\000\000\000\000\000\000\077\000\000\000\077\000\000\000\000\000\
\077\000\077\000\077\000\077\000\077\000\077\000\000\000\000\000\
\078\000\078\000\000\000\078\000\078\000\000\000\000\000\000\000\
\000\000\078\000\000\000\078\000\000\000\077\000\078\000\078\000\
\078\000\078\000\078\000\078\000\079\000\000\000\000\000\079\000\
\079\000\000\000\077\000\079\000\077\000\000\000\000\000\000\000\
\000\000\000\000\000\000\078\000\000\000\000\000\000\000\000\000\
\000\000\000\000\080\000\000\000\000\000\080\000\080\000\000\000\
\078\000\080\000\078\000\000\000\000\000\000\000\000\000\000\000\
\079\000\079\000\000\000\079\000\079\000\000\000\000\000\000\000\
\000\000\079\000\000\000\079\000\000\000\000\000\079\000\079\000\
\079\000\079\000\079\000\079\000\000\000\000\000\080\000\000\000\
\000\000\080\000\080\000\000\000\000\000\000\000\000\000\080\000\
\000\000\080\000\000\000\079\000\080\000\080\000\080\000\080\000\
\080\000\080\000\081\000\000\000\000\000\081\000\081\000\000\000\
\079\000\081\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\080\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\000\000\000\000\000\082\000\082\000\000\000\080\000\082\000\
\080\000\000\000\000\000\000\000\000\000\000\000\081\000\000\000\
\000\000\081\000\081\000\000\000\000\000\000\000\000\000\081\000\
\000\000\081\000\000\000\000\000\081\000\081\000\081\000\081\000\
\081\000\081\000\000\000\000\000\000\000\000\000\000\000\082\000\
\082\000\000\000\000\000\000\000\000\000\082\000\000\000\082\000\
\000\000\081\000\082\000\082\000\082\000\082\000\082\000\082\000\
\083\000\000\000\000\000\083\000\083\000\000\000\081\000\083\000\
\081\000\000\000\000\000\000\000\000\000\000\000\000\000\082\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\082\000\000\000\082\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\083\000\
\083\000\000\000\000\000\000\000\000\000\083\000\000\000\083\000\
\000\000\000\000\083\000\083\000\083\000\083\000\083\000\083\000\
\000\000\000\000\000\000\000\000\086\001\086\001\086\001\086\001\
\086\001\086\001\086\001\086\001\086\001\086\001\086\001\083\000\
\086\001\086\001\086\001\000\000\086\001\086\001\086\001\086\001\
\000\000\000\000\086\001\000\000\083\000\000\000\083\000\086\001\
\086\001\086\001\086\001\000\000\086\001\088\001\088\001\088\001\
\088\001\088\001\088\001\088\001\088\001\088\001\088\001\088\001\
\000\000\088\001\088\001\088\001\000\000\088\001\088\001\088\001\
\088\001\000\000\000\000\088\001\000\000\000\000\000\000\000\000\
\088\001\088\001\088\001\088\001\000\000\088\001\086\001\000\000\
\100\001\100\001\100\001\100\001\100\001\100\001\100\001\100\001\
\000\000\000\000\000\000\000\000\100\001\100\001\100\001\000\000\
\100\001\100\001\100\001\100\001\000\000\000\000\100\001\000\000\
\000\000\000\000\000\000\100\001\100\001\100\001\100\001\088\001\
\100\001\101\001\101\001\101\001\101\001\101\001\101\001\101\001\
\101\001\000\000\000\000\000\000\000\000\101\001\101\001\101\001\
\000\000\101\001\101\001\101\001\101\001\000\000\000\000\101\001\
\000\000\000\000\000\000\000\000\101\001\101\001\101\001\101\001\
\000\000\101\001\100\001\000\000\102\001\102\001\102\001\102\001\
\102\001\102\001\102\001\102\001\000\000\000\000\000\000\000\000\
\102\001\102\001\102\001\000\000\102\001\102\001\102\001\102\001\
\000\000\000\000\102\001\000\000\000\000\000\000\000\000\102\001\
\102\001\102\001\102\001\101\001\102\001\103\001\103\001\103\001\
\103\001\103\001\103\001\000\000\000\000\000\000\000\000\000\000\
\000\000\103\001\103\001\103\001\000\000\103\001\103\001\103\001\
\103\001\000\000\000\000\103\001\000\000\000\000\000\000\000\000\
\103\001\103\001\103\001\103\001\000\000\103\001\102\001\000\000\
\104\001\104\001\104\001\104\001\104\001\104\001\000\000\000\000\
\000\000\000\000\000\000\000\000\104\001\104\001\104\001\000\000\
\104\001\104\001\104\001\104\001\000\000\000\000\104\001\000\000\
\000\000\000\000\000\000\104\001\104\001\104\001\104\001\103\001\
\104\001\105\001\105\001\105\001\105\001\105\001\105\001\000\000\
\000\000\000\000\000\000\000\000\000\000\105\001\105\001\105\001\
\000\000\105\001\105\001\105\001\105\001\000\000\000\000\105\001\
\000\000\000\000\000\000\000\000\105\001\105\001\105\001\105\001\
\000\000\105\001\104\001\000\000\106\001\106\001\106\001\106\001\
\106\001\106\001\000\000\000\000\000\000\000\000\000\000\000\000\
\106\001\106\001\106\001\000\000\106\001\106\001\000\000\000\000\
\000\000\000\000\106\001\000\000\000\000\000\000\000\000\106\001\
\106\001\106\001\106\001\105\001\106\001\107\001\107\001\107\001\
\107\001\107\001\107\001\000\000\000\000\000\000\000\000\000\000\
\000\000\107\001\107\001\107\001\000\000\107\001\107\001\000\000\
\000\000\000\000\000\000\107\001\000\000\000\000\000\000\000\000\
\107\001\107\001\107\001\107\001\000\000\107\001\106\001\000\000\
\108\001\108\001\108\001\108\001\108\001\108\001\000\000\000\000\
\000\000\000\000\000\000\000\000\108\001\108\001\108\001\000\000\
\108\001\108\001\000\000\000\000\000\000\000\000\108\001\000\000\
\000\000\000\000\000\000\108\001\108\001\108\001\108\001\107\001\
\108\001\109\001\109\001\109\001\109\001\109\001\109\001\000\000\
\000\000\000\000\000\000\000\000\000\000\109\001\109\001\109\001\
\000\000\109\001\109\001\000\000\000\000\000\000\000\000\109\001\
\000\000\000\000\000\000\000\000\109\001\109\001\109\001\109\001\
\000\000\109\001\108\001\000\000\110\001\110\001\110\001\110\001\
\110\001\110\001\000\000\000\000\000\000\000\000\000\000\000\000\
\110\001\110\001\110\001\000\000\110\001\110\001\000\000\000\000\
\000\000\000\000\110\001\000\000\000\000\000\000\000\000\110\001\
\110\001\110\001\110\001\109\001\110\001\000\000\000\000\000\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\000\000\023\000\023\000\023\000\110\001\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\023\000\023\000\
\000\000\023\000\000\000\018\000\000\000\023\000\000\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\023\000\000\000\023\000\023\000\023\000\
\023\000\023\000\023\000\000\000\023\000\000\000\000\000\023\000\
\000\000\000\000\023\000\023\000\000\000\023\000"

let yycheck = "\021\000\
\048\000\088\000\028\000\001\000\002\000\004\000\077\000\128\000\
\138\000\191\001\149\000\060\000\000\000\044\000\036\000\025\001\
\000\000\043\000\013\001\001\000\002\000\044\000\000\000\148\000\
\027\001\022\001\078\000\001\001\198\000\026\001\028\000\000\001\
\014\000\050\001\051\001\152\002\178\000\124\000\071\000\021\000\
\022\000\149\000\091\000\025\000\026\000\043\000\028\000\120\002\
\030\000\036\000\034\001\001\001\158\000\159\000\012\000\013\000\
\006\001\015\000\000\001\000\001\000\001\043\000\001\001\045\000\
\234\000\087\000\236\000\089\000\050\000\208\000\052\000\070\001\
\031\001\055\000\000\001\000\001\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\045\001\046\001\066\002\068\000\204\002\
\069\002\001\001\070\001\072\002\001\001\129\002\006\001\077\000\
\070\001\006\001\001\001\000\001\208\000\095\001\071\001\006\001\
\069\001\063\000\088\000\070\001\181\002\067\000\046\001\073\001\
\077\001\055\001\108\001\073\000\055\001\104\000\149\000\069\001\
\070\001\096\000\097\000\073\001\055\001\123\000\149\000\077\001\
\164\002\246\002\163\000\072\001\072\001\166\000\167\000\168\000\
\095\001\073\001\171\000\172\000\055\001\123\000\070\001\055\001\
\175\000\076\001\072\001\072\001\174\000\108\001\198\000\110\001\
\055\001\001\000\002\000\207\000\178\000\022\001\070\001\076\001\
\075\001\026\001\027\001\077\001\090\002\079\001\148\000\070\001\
\118\001\007\001\073\001\072\001\064\001\042\001\088\001\076\001\
\174\000\098\000\099\000\100\000\101\000\102\000\103\000\097\001\
\098\001\208\000\234\000\079\001\236\000\192\001\007\001\188\001\
\174\000\070\001\025\001\106\002\113\001\000\001\071\001\216\001\
\203\001\070\002\052\001\187\001\077\001\202\001\118\001\204\001\
\230\000\118\001\072\001\122\002\187\000\188\000\045\001\118\001\
\198\000\091\001\001\001\198\000\201\002\196\000\197\000\006\001\
\055\001\206\002\053\001\054\001\250\000\251\000\252\000\253\000\
\254\000\255\000\000\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\023\001\246\001\055\001\001\001\234\000\020\001\236\000\234\000\
\006\001\236\000\144\001\145\001\064\001\099\001\100\001\250\000\
\013\000\096\001\015\000\000\000\000\001\072\001\075\001\076\001\
\000\001\076\001\077\001\079\001\053\001\146\002\000\001\056\001\
\149\002\001\001\099\001\100\001\153\002\077\001\006\001\079\001\
\065\001\072\001\248\000\249\000\069\001\069\001\048\002\074\001\
\088\001\036\002\077\001\075\001\007\001\008\001\189\000\190\000\
\191\000\192\000\193\000\194\000\001\001\069\001\036\001\072\001\
\095\001\006\001\001\001\064\000\042\001\077\001\055\001\006\001\
\069\001\190\002\072\001\188\001\070\001\108\001\075\001\192\001\
\197\002\001\001\251\000\252\000\253\000\070\001\006\001\118\001\
\073\001\202\001\203\001\204\001\000\001\001\001\069\001\071\001\
\001\001\001\001\006\001\074\001\075\001\076\001\070\001\077\001\
\183\001\079\001\077\001\096\002\079\001\000\001\001\001\001\001\
\000\001\071\001\088\001\046\001\006\001\088\001\076\001\236\002\
\118\001\001\001\124\002\097\001\098\001\001\001\006\001\244\002\
\069\001\070\001\144\001\145\001\073\001\246\001\197\001\072\001\
\077\001\072\001\069\001\110\001\111\001\220\001\073\001\004\003\
\099\001\100\001\069\001\055\001\065\001\066\001\118\001\055\001\
\072\001\071\001\077\001\196\001\106\001\107\001\076\001\070\001\
\095\001\069\001\070\001\186\001\055\001\073\001\070\001\075\001\
\076\001\077\001\070\001\142\001\076\001\108\001\072\001\095\001\
\199\001\118\001\069\001\070\001\070\001\016\003\073\001\118\001\
\075\001\076\001\077\001\069\001\108\001\024\003\074\001\073\001\
\072\001\059\002\078\001\077\001\001\001\222\001\118\001\188\002\
\034\001\006\001\108\002\109\002\001\001\024\001\001\001\197\001\
\027\001\006\001\118\001\006\001\087\002\204\001\118\001\001\001\
\001\001\191\001\041\002\074\001\006\001\006\001\077\001\197\001\
\001\001\048\002\072\001\118\001\118\001\006\001\075\001\075\001\
\007\001\183\001\078\001\069\001\075\001\112\002\118\001\096\002\
\070\001\075\001\076\001\077\001\067\002\124\001\125\001\126\001\
\127\001\128\001\129\001\130\001\131\001\132\001\133\001\134\001\
\135\001\136\001\137\001\138\001\139\001\140\001\141\001\000\001\
\069\001\070\001\237\001\238\001\073\001\076\002\055\001\078\002\
\077\001\070\001\081\002\059\001\073\001\072\001\036\002\000\001\
\061\001\138\002\060\001\106\002\069\001\070\001\072\001\070\001\
\073\001\073\002\073\001\063\001\077\001\070\001\069\001\053\002\
\119\002\034\001\001\001\122\002\075\001\124\002\076\001\024\001\
\047\001\048\001\027\001\028\001\024\001\077\001\031\001\027\001\
\028\001\118\001\034\001\031\001\065\001\066\001\069\001\070\001\
\087\002\118\001\073\001\118\001\099\001\100\001\077\001\077\001\
\087\002\076\001\000\001\188\002\118\001\118\001\191\002\072\001\
\101\001\052\002\076\001\076\001\077\001\118\001\076\002\200\002\
\078\002\152\002\040\002\081\002\053\001\054\001\065\002\047\001\
\048\001\112\002\070\001\069\001\118\002\073\001\076\002\182\002\
\078\002\240\001\055\001\081\002\034\001\077\001\076\002\000\001\
\078\002\092\001\093\001\081\002\090\002\034\001\095\001\198\002\
\091\002\000\001\001\001\095\001\069\001\097\001\076\001\077\001\
\118\002\076\001\077\001\108\001\001\001\110\001\108\002\109\002\
\108\001\077\001\110\001\072\001\163\002\076\001\077\001\069\001\
\118\002\034\001\072\001\127\001\128\001\075\001\076\001\077\001\
\155\002\156\002\024\001\129\002\106\002\027\001\028\001\024\001\
\110\002\031\001\027\001\028\001\129\001\130\001\031\001\207\002\
\055\001\056\001\057\001\142\002\122\002\076\001\145\002\055\001\
\056\001\057\001\152\002\071\001\069\001\152\002\072\001\072\001\
\135\001\136\001\075\001\076\001\077\001\071\001\164\002\072\001\
\015\003\000\001\001\001\254\000\255\000\237\002\069\001\006\001\
\000\001\001\001\009\001\010\001\011\001\012\001\013\001\014\001\
\069\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\095\001\070\001\097\001\070\001\001\001\095\001\006\001\
\007\001\204\002\070\001\070\001\069\001\116\002\108\001\069\001\
\110\001\064\001\059\001\108\001\002\003\110\001\069\001\061\001\
\055\001\014\000\060\001\074\001\075\001\076\001\077\001\063\001\
\079\001\022\000\045\001\046\001\025\000\026\000\069\001\070\001\
\077\001\030\000\073\001\069\001\075\001\076\001\077\001\049\001\
\050\001\051\001\052\001\246\002\049\001\050\001\051\001\052\001\
\067\001\068\001\004\001\070\001\004\001\050\000\073\001\052\000\
\095\001\096\001\113\001\098\001\024\001\069\001\004\001\027\001\
\028\001\113\001\001\001\031\001\071\001\108\001\071\001\110\001\
\000\001\001\001\069\001\071\001\105\001\116\001\006\001\118\001\
\069\001\009\001\010\001\011\001\012\001\013\001\014\001\071\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\069\001\069\001\069\001\071\001\075\001\077\001\074\001\075\001\
\076\001\077\001\078\001\076\001\071\001\076\001\059\001\060\001\
\061\001\071\001\063\001\064\001\071\001\071\001\071\001\055\001\
\069\001\069\001\069\001\095\001\069\001\074\001\075\001\076\001\
\077\001\069\001\079\001\077\001\001\001\069\001\070\001\070\001\
\108\001\073\001\110\001\075\001\076\001\077\001\131\001\132\001\
\133\001\134\001\069\001\002\001\003\001\004\001\005\001\074\001\
\075\001\076\001\077\001\069\001\069\001\074\001\001\001\095\001\
\096\001\001\001\098\001\024\001\113\001\075\001\027\001\028\001\
\070\001\077\001\031\001\076\001\108\001\076\001\110\001\000\001\
\001\001\073\001\071\001\071\001\116\001\006\001\118\001\071\001\
\009\001\010\001\011\001\012\001\013\001\014\001\113\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\071\001\
\074\001\070\001\047\001\048\001\073\001\069\001\077\001\069\001\
\069\001\077\001\077\001\069\001\077\001\069\001\059\001\060\001\
\061\001\077\001\063\001\064\001\075\001\034\001\055\001\072\001\
\069\001\072\001\095\001\077\001\097\001\074\001\075\001\076\001\
\077\001\072\001\079\001\075\001\069\001\070\001\069\001\108\001\
\073\001\110\001\075\001\076\001\077\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\071\001\069\001\069\001\075\001\070\001\075\001\095\001\096\001\
\070\001\098\001\024\001\076\001\113\001\027\001\028\001\076\001\
\076\001\031\001\071\001\108\001\077\001\110\001\000\001\001\001\
\076\001\069\001\074\001\116\001\006\001\118\001\071\001\009\001\
\010\001\011\001\012\001\013\001\014\001\069\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\076\001\076\001\
\070\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\075\001\059\001\060\001\061\001\
\087\001\063\001\064\001\065\001\066\001\055\001\070\001\069\001\
\069\001\095\001\069\001\074\001\074\001\075\001\076\001\077\001\
\071\001\079\001\069\001\069\001\070\001\069\001\108\001\073\001\
\110\001\075\001\076\001\077\001\071\001\000\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\008\001\071\001\059\001\
\060\001\061\001\076\001\063\001\064\001\095\001\096\001\076\001\
\098\001\069\001\094\001\113\001\007\001\001\001\074\001\075\001\
\076\001\077\001\108\001\079\001\110\001\032\001\033\001\034\001\
\063\001\064\001\116\001\074\001\118\001\075\001\069\001\076\001\
\076\001\075\001\069\001\074\001\075\001\076\001\077\001\073\001\
\079\001\069\001\053\001\054\001\055\001\001\001\075\001\058\001\
\059\001\074\001\077\001\062\001\063\001\113\001\076\001\070\001\
\067\001\068\001\069\001\070\001\069\001\072\001\073\001\074\001\
\075\001\076\001\077\001\075\001\069\001\069\001\077\001\000\001\
\071\001\076\001\113\001\113\001\114\001\115\001\116\001\117\001\
\118\001\119\001\120\001\121\001\122\001\123\001\069\001\069\001\
\099\001\100\001\071\001\102\001\069\001\069\001\073\001\106\001\
\107\001\071\001\076\001\071\001\069\001\071\001\075\001\071\001\
\071\001\076\001\117\001\118\001\000\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\074\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\070\001\076\001\
\076\001\069\001\069\001\069\001\069\001\069\001\002\000\123\000\
\192\001\046\001\175\002\181\002\023\001\221\001\057\002\135\000\
\056\002\053\001\054\001\055\001\139\001\163\002\058\001\059\001\
\116\002\240\002\062\001\063\001\137\001\191\002\138\001\067\001\
\068\001\140\001\070\001\071\001\072\001\141\001\155\000\207\001\
\076\001\091\002\008\001\010\001\080\001\081\001\082\001\083\001\
\084\001\085\001\086\001\087\001\088\001\089\001\090\001\091\001\
\009\001\011\001\008\003\095\001\096\001\097\001\098\001\099\001\
\100\001\012\001\102\001\006\003\255\255\105\001\106\001\107\001\
\108\001\109\001\110\001\111\001\112\001\024\003\255\255\255\255\
\116\001\117\001\000\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\055\001\255\255\255\255\058\001\059\001\255\255\255\255\
\062\001\063\001\255\255\255\255\255\255\067\001\068\001\255\255\
\070\001\071\001\072\001\255\255\255\255\255\255\076\001\255\255\
\255\255\255\255\080\001\081\001\082\001\083\001\084\001\085\001\
\086\001\087\001\088\001\089\001\090\001\091\001\255\255\255\255\
\255\255\095\001\096\001\097\001\098\001\099\001\100\001\255\255\
\102\001\255\255\255\255\255\255\106\001\107\001\108\001\109\001\
\110\001\111\001\112\001\255\255\255\255\255\255\116\001\117\001\
\000\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\070\001\071\001\
\072\001\255\255\255\255\255\255\076\001\255\255\255\255\255\255\
\080\001\081\001\082\001\083\001\084\001\085\001\086\001\087\001\
\088\001\089\001\090\001\091\001\255\255\255\255\255\255\095\001\
\096\001\097\001\098\001\099\001\100\001\255\255\102\001\255\255\
\255\255\255\255\106\001\107\001\108\001\109\001\110\001\111\001\
\112\001\255\255\255\255\255\255\116\001\117\001\000\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\072\001\255\255\
\255\255\255\255\076\001\255\255\255\255\255\255\080\001\081\001\
\082\001\083\001\084\001\085\001\086\001\087\001\088\001\089\001\
\090\001\091\001\255\255\255\255\255\255\095\001\096\001\097\001\
\098\001\099\001\100\001\255\255\102\001\255\255\255\255\255\255\
\106\001\107\001\108\001\109\001\110\001\111\001\112\001\255\255\
\255\255\255\255\116\001\117\001\000\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\063\001\064\001\
\255\255\255\255\255\255\255\255\069\001\255\255\255\255\255\255\
\255\255\074\001\075\001\076\001\077\001\255\255\079\001\255\255\
\255\255\053\001\054\001\055\001\255\255\255\255\058\001\059\001\
\255\255\255\255\062\001\063\001\255\255\255\255\064\001\067\001\
\068\001\255\255\070\001\069\001\072\001\255\255\255\255\255\255\
\074\001\075\001\076\001\077\001\255\255\079\001\255\255\255\255\
\113\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\095\001\096\001\255\255\098\001\099\001\
\100\001\255\255\102\001\255\255\255\255\255\255\106\001\107\001\
\108\001\255\255\110\001\255\255\255\255\255\255\255\255\113\001\
\116\001\117\001\000\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\055\001\255\255\255\255\058\001\059\001\255\255\255\255\
\062\001\063\001\255\255\255\255\255\255\067\001\068\001\255\255\
\070\001\000\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\095\001\096\001\255\255\098\001\099\001\100\001\255\255\
\102\001\032\001\033\001\255\255\106\001\107\001\108\001\255\255\
\110\001\255\255\255\255\255\255\255\255\255\255\116\001\117\001\
\255\255\255\255\255\255\255\255\255\255\255\255\053\001\054\001\
\055\001\255\255\255\255\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\071\001\072\001\255\255\255\255\255\255\076\001\255\255\255\255\
\255\255\080\001\081\001\082\001\083\001\084\001\085\001\086\001\
\087\001\088\001\089\001\090\001\091\001\255\255\255\255\255\255\
\255\255\255\255\097\001\255\255\099\001\100\001\255\255\102\001\
\255\255\255\255\255\255\106\001\107\001\255\255\109\001\255\255\
\000\001\001\001\002\001\003\001\004\001\005\001\117\001\007\001\
\008\001\255\255\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\032\001\033\001\069\001\255\255\255\255\255\255\073\001\074\001\
\075\001\076\001\077\001\255\255\079\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\070\001\255\255\
\072\001\255\255\255\255\255\255\076\001\255\255\113\001\255\255\
\080\001\081\001\082\001\083\001\084\001\085\001\086\001\087\001\
\088\001\089\001\090\001\091\001\255\255\255\255\255\255\255\255\
\255\255\097\001\255\255\099\001\100\001\255\255\102\001\255\255\
\255\255\255\255\106\001\107\001\255\255\109\001\255\255\000\001\
\001\001\002\001\003\001\004\001\005\001\117\001\007\001\008\001\
\255\255\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\055\001\056\001\057\001\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\065\001\066\001\032\001\
\033\001\069\001\255\255\255\255\255\255\073\001\074\001\255\255\
\076\001\077\001\255\255\079\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\072\001\
\255\255\255\255\255\255\076\001\255\255\113\001\255\255\080\001\
\081\001\082\001\083\001\084\001\085\001\086\001\087\001\088\001\
\089\001\090\001\091\001\255\255\255\255\255\255\255\255\255\255\
\097\001\255\255\099\001\100\001\255\255\102\001\255\255\255\255\
\255\255\106\001\107\001\255\255\109\001\255\255\255\255\255\255\
\255\255\255\255\047\001\048\001\117\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\255\255\059\001\060\001\
\061\001\255\255\063\001\064\001\255\255\255\255\255\255\255\255\
\069\001\255\255\255\255\255\255\255\255\074\001\075\001\076\001\
\077\001\255\255\079\001\255\255\032\001\033\001\001\001\255\255\
\255\255\004\001\255\255\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\046\001\255\255\255\255\255\255\255\255\255\255\
\255\255\053\001\054\001\055\001\255\255\024\001\058\001\059\001\
\027\001\255\255\062\001\063\001\113\001\032\001\033\001\067\001\
\068\001\255\255\070\001\255\255\072\001\073\001\255\255\255\255\
\000\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\255\255\053\001\054\001\055\001\255\255\255\255\058\001\
\059\001\255\255\255\255\062\001\255\255\255\255\255\255\099\001\
\100\001\255\255\102\001\070\001\255\255\255\255\106\001\107\001\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\117\001\118\001\086\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\055\001\
\099\001\100\001\058\001\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\070\001\255\255\
\255\255\255\255\255\255\255\255\076\001\000\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\008\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\099\001\100\001\255\255\102\001\255\255\
\255\255\255\255\106\001\107\001\255\255\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\255\255\117\001\255\255\024\001\
\255\255\255\255\027\001\028\001\255\255\255\255\031\001\255\255\
\255\255\255\255\053\001\054\001\055\001\255\255\255\255\058\001\
\059\001\255\255\255\255\062\001\063\001\255\255\255\255\255\255\
\067\001\068\001\255\255\070\001\255\255\255\255\255\255\074\001\
\255\255\000\001\001\001\002\001\003\001\004\001\005\001\064\001\
\007\001\008\001\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\099\001\100\001\255\255\102\001\255\255\255\255\255\255\106\001\
\107\001\032\001\033\001\255\255\255\255\255\255\095\001\255\255\
\255\255\255\255\117\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\108\001\255\255\110\001\053\001\054\001\
\055\001\255\255\255\255\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\000\001\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\008\001\099\001\100\001\255\255\102\001\
\032\001\033\001\255\255\106\001\107\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\117\001\255\255\
\255\255\255\255\255\255\032\001\033\001\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\070\001\255\255\
\053\001\054\001\055\001\255\255\255\255\058\001\059\001\255\255\
\255\255\062\001\063\001\255\255\255\255\255\255\067\001\068\001\
\255\255\070\001\000\001\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\008\001\099\001\100\001\255\255\102\001\255\255\
\255\255\255\255\106\001\107\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\117\001\099\001\100\001\
\255\255\102\001\032\001\033\001\255\255\106\001\107\001\024\001\
\255\255\255\255\027\001\028\001\255\255\255\255\031\001\255\255\
\117\001\255\255\255\255\255\255\255\255\255\255\255\255\053\001\
\054\001\055\001\255\255\255\255\058\001\059\001\255\255\255\255\
\062\001\063\001\255\255\255\255\255\255\067\001\068\001\255\255\
\070\001\000\001\001\001\002\001\003\001\004\001\005\001\064\001\
\007\001\008\001\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\099\001\100\001\255\255\
\102\001\032\001\033\001\255\255\106\001\107\001\095\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\117\001\
\255\255\255\255\255\255\108\001\255\255\110\001\053\001\054\001\
\055\001\255\255\060\001\058\001\059\001\063\001\064\001\062\001\
\063\001\255\255\255\255\069\001\067\001\068\001\255\255\070\001\
\074\001\075\001\076\001\077\001\255\255\079\001\255\255\255\255\
\060\001\061\001\255\255\063\001\064\001\255\255\255\255\255\255\
\255\255\069\001\255\255\255\255\255\255\255\255\074\001\075\001\
\076\001\077\001\255\255\079\001\099\001\100\001\255\255\102\001\
\255\255\255\255\255\255\106\001\107\001\255\255\255\255\113\001\
\255\255\255\255\255\255\255\255\255\255\255\255\117\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\113\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\060\001\061\001\255\255\
\063\001\064\001\255\255\255\255\255\255\255\255\069\001\255\255\
\255\255\255\255\255\255\074\001\075\001\076\001\077\001\255\255\
\079\001\255\255\255\255\255\255\255\255\095\001\096\001\255\255\
\098\001\099\001\100\001\255\255\102\001\255\255\255\255\255\255\
\106\001\107\001\108\001\000\001\110\001\255\255\255\255\255\255\
\255\255\006\001\116\001\117\001\009\001\010\001\011\001\012\001\
\013\001\014\001\113\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\060\001\
\255\255\255\255\063\001\064\001\255\255\255\255\255\255\255\255\
\069\001\255\255\255\255\255\255\255\255\074\001\075\001\076\001\
\077\001\255\255\079\001\255\255\255\255\047\001\048\001\255\255\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\076\001\
\255\255\255\255\255\255\069\001\255\255\255\255\255\255\255\255\
\074\001\075\001\076\001\077\001\113\001\079\001\255\255\032\001\
\033\001\034\001\095\001\096\001\255\255\098\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\108\001\
\255\255\110\001\111\001\112\001\053\001\054\001\055\001\116\001\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\113\001\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\072\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\099\001\100\001\255\255\102\001\255\255\032\001\
\033\001\106\001\107\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\072\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\099\001\100\001\255\255\102\001\255\255\032\001\
\033\001\106\001\107\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\072\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\099\001\100\001\255\255\102\001\255\255\032\001\
\033\001\106\001\107\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\072\001\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\099\001\100\001\255\255\102\001\255\255\032\001\
\033\001\106\001\107\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\008\001\099\001\100\001\255\255\102\001\032\001\033\001\
\255\255\106\001\107\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\255\255\255\255\255\255\
\255\255\032\001\033\001\053\001\054\001\055\001\255\255\255\255\
\058\001\059\001\255\255\255\255\062\001\063\001\255\255\255\255\
\255\255\067\001\068\001\255\255\070\001\255\255\053\001\054\001\
\055\001\255\255\255\255\058\001\059\001\255\255\255\255\062\001\
\063\001\255\255\255\255\255\255\067\001\068\001\255\255\070\001\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\008\001\099\001\100\001\255\255\102\001\255\255\255\255\255\255\
\106\001\107\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\117\001\099\001\100\001\255\255\102\001\
\032\001\033\001\255\255\106\001\107\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\117\001\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\062\001\063\001\
\255\255\255\255\255\255\067\001\068\001\255\255\070\001\255\255\
\001\001\002\001\003\001\004\001\005\001\255\255\007\001\008\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\007\001\008\001\099\001\100\001\255\255\102\001\032\001\
\033\001\255\255\106\001\107\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\117\001\255\255\255\255\
\255\255\255\255\032\001\033\001\053\001\054\001\055\001\255\255\
\255\255\058\001\059\001\255\255\255\255\062\001\063\001\255\255\
\255\255\255\255\067\001\068\001\255\255\070\001\255\255\053\001\
\054\001\055\001\255\255\255\255\058\001\059\001\255\255\255\255\
\062\001\063\001\255\255\255\255\255\255\067\001\068\001\255\255\
\070\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\099\001\100\001\255\255\102\001\255\255\255\255\
\255\255\106\001\107\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\117\001\099\001\100\001\255\255\
\102\001\001\001\255\255\255\255\106\001\107\001\006\001\255\255\
\255\255\009\001\010\001\011\001\012\001\013\001\014\001\117\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\001\001\255\255\255\255\255\255\255\255\006\001\255\255\255\255\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\076\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\096\001\097\001\098\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\108\001\255\255\110\001\111\001\
\112\001\255\255\114\001\115\001\116\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\095\001\096\001\
\097\001\098\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\108\001\255\255\110\001\111\001\112\001\
\255\255\114\001\115\001\116\001\006\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\069\001\070\001\071\001\072\001\073\001\
\074\001\075\001\076\001\077\001\078\001\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\096\001\255\255\
\098\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\108\001\255\255\110\001\255\255\255\255\113\001\
\006\001\007\001\116\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\006\001\255\255\255\255\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\095\001\096\001\070\001\098\001\099\001\100\001\255\255\
\255\255\255\255\255\255\078\001\255\255\255\255\108\001\255\255\
\110\001\255\255\255\255\255\255\255\255\255\255\116\001\255\255\
\255\255\255\255\255\255\255\255\095\001\096\001\255\255\098\001\
\069\001\070\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\108\001\255\255\110\001\255\255\255\255\255\255\255\255\
\255\255\116\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\095\001\096\001\255\255\098\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\108\001\
\255\255\110\001\255\255\255\255\255\255\006\001\255\255\116\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\255\255\
\006\001\255\255\255\255\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\255\255\255\255\006\001\255\255\255\255\009\001\
\010\001\011\001\012\001\013\001\014\001\070\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\095\001\096\001\
\255\255\098\001\072\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\108\001\255\255\110\001\255\255\255\255\
\255\255\255\255\255\255\116\001\255\255\255\255\255\255\255\255\
\255\255\095\001\096\001\255\255\098\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\078\001\255\255\108\001\255\255\
\110\001\255\255\255\255\255\255\255\255\255\255\116\001\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\096\001\255\255\
\098\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\108\001\255\255\110\001\255\255\255\255\255\255\
\006\001\255\255\116\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\009\001\010\001\011\001\012\001\013\001\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\001\001\001\255\255\255\255\
\004\001\255\255\006\001\007\001\255\255\255\255\255\255\255\255\
\255\255\095\001\096\001\255\255\098\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\108\001\027\001\
\110\001\255\255\255\255\255\255\032\001\033\001\116\001\255\255\
\095\001\096\001\255\255\098\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\108\001\255\255\110\001\
\255\255\053\001\054\001\055\001\255\255\116\001\058\001\059\001\
\000\001\001\001\062\001\255\255\004\001\255\255\006\001\007\001\
\255\255\069\001\070\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\086\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\099\001\
\100\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\000\001\001\001\062\001\255\255\
\004\001\255\255\006\001\007\001\255\255\255\255\070\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\086\001\027\001\
\255\255\255\255\255\255\255\255\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\099\001\100\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\053\001\054\001\055\001\255\255\255\255\058\001\059\001\
\000\001\001\001\062\001\255\255\004\001\255\255\006\001\007\001\
\255\255\255\255\070\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\086\001\027\001\255\255\255\255\255\255\255\255\
\032\001\033\001\255\255\255\255\255\255\255\255\255\255\099\001\
\100\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\053\001\054\001\055\001\
\255\255\255\255\058\001\059\001\255\255\255\255\062\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\070\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\086\001\255\255\
\255\255\255\255\255\255\024\001\255\255\255\255\027\001\028\001\
\255\255\255\255\031\001\099\001\100\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\255\255\059\001\060\001\
\061\001\255\255\063\001\064\001\065\001\066\001\067\001\068\001\
\069\001\070\001\071\001\255\255\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\095\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\108\001\
\255\255\110\001\024\001\255\255\113\001\027\001\028\001\255\255\
\255\255\031\001\255\255\255\255\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\255\255\
\255\255\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\255\255\255\255\069\001\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\077\001\
\078\001\079\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\095\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\108\001\255\255\
\110\001\024\001\255\255\113\001\027\001\028\001\255\255\255\255\
\031\001\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\255\255\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\078\001\
\079\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\095\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\108\001\255\255\110\001\
\024\001\255\255\113\001\027\001\028\001\255\255\255\255\031\001\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\255\255\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\065\001\066\001\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\255\255\095\001\
\027\001\028\001\255\255\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\108\001\255\255\110\001\255\255\
\255\255\113\001\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\255\255\255\255\069\001\255\255\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\027\001\028\001\255\255\095\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\108\001\255\255\110\001\255\255\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\255\255\255\255\069\001\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\255\255\027\001\028\001\255\255\095\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\108\001\255\255\110\001\255\255\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\065\001\066\001\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\027\001\028\001\255\255\095\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\108\001\255\255\110\001\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\065\001\066\001\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\027\001\028\001\255\255\095\001\
\031\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\108\001\255\255\110\001\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\071\001\255\255\255\255\074\001\075\001\076\001\077\001\078\001\
\079\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\027\001\028\001\255\255\
\095\001\031\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\108\001\255\255\110\001\
\255\255\047\001\048\001\049\001\050\001\051\001\052\001\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\255\255\255\255\069\001\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\077\001\
\078\001\079\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\255\255\255\255\027\001\028\001\
\255\255\095\001\031\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\108\001\255\255\
\110\001\255\255\047\001\048\001\049\001\050\001\051\001\052\001\
\255\255\255\255\255\255\255\255\255\255\255\255\059\001\060\001\
\061\001\255\255\063\001\064\001\065\001\066\001\255\255\255\255\
\069\001\255\255\071\001\255\255\255\255\074\001\075\001\076\001\
\077\001\078\001\079\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\027\001\
\028\001\255\255\095\001\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\108\001\
\255\255\110\001\255\255\047\001\048\001\049\001\050\001\051\001\
\052\001\255\255\255\255\255\255\255\255\255\255\255\255\059\001\
\060\001\061\001\255\255\063\001\064\001\255\255\255\255\255\255\
\255\255\069\001\255\255\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\078\001\079\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\255\255\255\255\
\027\001\028\001\255\255\095\001\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\108\001\255\255\110\001\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\071\001\255\255\255\255\074\001\
\075\001\076\001\077\001\078\001\079\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\255\255\
\255\255\027\001\028\001\255\255\095\001\031\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\108\001\255\255\110\001\255\255\047\001\048\001\049\001\
\050\001\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\255\255\
\255\255\255\255\255\255\069\001\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001\079\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\255\255\027\001\028\001\255\255\095\001\031\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\108\001\255\255\110\001\255\255\047\001\048\001\
\049\001\050\001\051\001\052\001\255\255\255\255\255\255\255\255\
\255\255\255\255\059\001\060\001\061\001\255\255\063\001\064\001\
\255\255\255\255\255\255\255\255\069\001\255\255\071\001\255\255\
\255\255\074\001\075\001\076\001\077\001\078\001\079\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\027\001\028\001\255\255\095\001\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\108\001\255\255\110\001\255\255\047\001\
\048\001\049\001\050\001\051\001\052\001\255\255\255\255\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\255\255\255\255\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\024\001\255\255\255\255\027\001\028\001\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\048\001\255\255\255\255\255\255\108\001\255\255\110\001\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\255\255\255\255\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\024\001\255\255\255\255\027\001\028\001\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\047\001\
\048\001\255\255\255\255\255\255\108\001\255\255\110\001\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\255\255\255\255\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\024\001\255\255\255\255\027\001\028\001\255\255\255\255\031\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\255\255\255\255\255\255\255\255\255\255\255\255\024\001\047\001\
\048\001\027\001\028\001\255\255\108\001\031\001\110\001\255\255\
\255\255\255\255\255\255\059\001\060\001\061\001\255\255\063\001\
\064\001\255\255\255\255\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\255\255\
\255\255\255\255\255\255\069\001\255\255\071\001\255\255\095\001\
\074\001\075\001\076\001\077\001\078\001\079\001\024\001\255\255\
\255\255\027\001\028\001\255\255\108\001\031\001\110\001\255\255\
\255\255\255\255\255\255\255\255\255\255\095\001\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\027\001\
\028\001\255\255\108\001\031\001\110\001\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\255\255\
\255\255\255\255\255\255\069\001\255\255\071\001\255\255\255\255\
\074\001\075\001\076\001\077\001\078\001\079\001\255\255\255\255\
\060\001\061\001\255\255\063\001\064\001\255\255\255\255\255\255\
\255\255\069\001\255\255\071\001\255\255\095\001\074\001\075\001\
\076\001\077\001\078\001\079\001\024\001\255\255\255\255\027\001\
\028\001\255\255\108\001\031\001\110\001\255\255\255\255\255\255\
\255\255\255\255\255\255\095\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\027\001\028\001\255\255\
\108\001\031\001\110\001\255\255\255\255\255\255\255\255\255\255\
\060\001\061\001\255\255\063\001\064\001\255\255\255\255\255\255\
\255\255\069\001\255\255\071\001\255\255\255\255\074\001\075\001\
\076\001\077\001\078\001\079\001\255\255\255\255\060\001\255\255\
\255\255\063\001\064\001\255\255\255\255\255\255\255\255\069\001\
\255\255\071\001\255\255\095\001\074\001\075\001\076\001\077\001\
\078\001\079\001\024\001\255\255\255\255\027\001\028\001\255\255\
\108\001\031\001\110\001\255\255\255\255\255\255\255\255\255\255\
\255\255\095\001\255\255\255\255\255\255\255\255\255\255\255\255\
\024\001\255\255\255\255\027\001\028\001\255\255\108\001\031\001\
\110\001\255\255\255\255\255\255\255\255\255\255\060\001\255\255\
\255\255\063\001\064\001\255\255\255\255\255\255\255\255\069\001\
\255\255\071\001\255\255\255\255\074\001\075\001\076\001\077\001\
\078\001\079\001\255\255\255\255\255\255\255\255\255\255\063\001\
\064\001\255\255\255\255\255\255\255\255\069\001\255\255\071\001\
\255\255\095\001\074\001\075\001\076\001\077\001\078\001\079\001\
\024\001\255\255\255\255\027\001\028\001\255\255\108\001\031\001\
\110\001\255\255\255\255\255\255\255\255\255\255\255\255\095\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\108\001\255\255\110\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\063\001\
\064\001\255\255\255\255\255\255\255\255\069\001\255\255\071\001\
\255\255\255\255\074\001\075\001\076\001\077\001\078\001\079\001\
\255\255\255\255\255\255\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\095\001\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\255\255\255\255\069\001\255\255\108\001\255\255\110\001\074\001\
\075\001\076\001\077\001\255\255\079\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\255\255\255\255\069\001\255\255\255\255\255\255\255\255\
\074\001\075\001\076\001\077\001\255\255\079\001\113\001\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\255\255\255\255\255\255\074\001\075\001\076\001\077\001\113\001\
\079\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\255\255\255\255\069\001\
\255\255\255\255\255\255\255\255\074\001\075\001\076\001\077\001\
\255\255\079\001\113\001\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\065\001\066\001\
\255\255\255\255\069\001\255\255\255\255\255\255\255\255\074\001\
\075\001\076\001\077\001\113\001\079\001\047\001\048\001\049\001\
\050\001\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\255\255\255\255\069\001\255\255\255\255\255\255\255\255\
\074\001\075\001\076\001\077\001\255\255\079\001\113\001\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\065\001\066\001\255\255\255\255\069\001\255\255\
\255\255\255\255\255\255\074\001\075\001\076\001\077\001\113\001\
\079\001\047\001\048\001\049\001\050\001\051\001\052\001\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\065\001\066\001\255\255\255\255\069\001\
\255\255\255\255\255\255\255\255\074\001\075\001\076\001\077\001\
\255\255\079\001\113\001\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\255\255\255\255\255\255\074\001\
\075\001\076\001\077\001\113\001\079\001\047\001\048\001\049\001\
\050\001\051\001\052\001\255\255\255\255\255\255\255\255\255\255\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\255\255\
\255\255\255\255\255\255\069\001\255\255\255\255\255\255\255\255\
\074\001\075\001\076\001\077\001\255\255\079\001\113\001\255\255\
\047\001\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\255\255\255\255\255\255\255\255\059\001\060\001\061\001\255\255\
\063\001\064\001\255\255\255\255\255\255\255\255\069\001\255\255\
\255\255\255\255\255\255\074\001\075\001\076\001\077\001\113\001\
\079\001\047\001\048\001\049\001\050\001\051\001\052\001\255\255\
\255\255\255\255\255\255\255\255\255\255\059\001\060\001\061\001\
\255\255\063\001\064\001\255\255\255\255\255\255\255\255\069\001\
\255\255\255\255\255\255\255\255\074\001\075\001\076\001\077\001\
\255\255\079\001\113\001\255\255\047\001\048\001\049\001\050\001\
\051\001\052\001\255\255\255\255\255\255\255\255\255\255\255\255\
\059\001\060\001\061\001\255\255\063\001\064\001\255\255\255\255\
\255\255\255\255\069\001\255\255\255\255\255\255\255\255\074\001\
\075\001\076\001\077\001\113\001\079\001\255\255\255\255\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\255\255\059\001\060\001\061\001\113\001\063\001\
\064\001\065\001\066\001\067\001\068\001\255\255\070\001\071\001\
\255\255\073\001\255\255\075\001\255\255\077\001\255\255\079\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\255\255\059\001\060\001\061\001\255\255\063\001\064\001\065\001\
\066\001\067\001\068\001\255\255\070\001\255\255\255\255\073\001\
\255\255\255\255\076\001\077\001\255\255\079\001"

let yynames_const = "\
  EOF\000\
  EQ\000\
  PLUS_EQ\000\
  MINUS_EQ\000\
  STAR_EQ\000\
  SLASH_EQ\000\
  PERCENT_EQ\000\
  AND_EQ\000\
  PIPE_EQ\000\
  CIRC_EQ\000\
  INF_INF_EQ\000\
  SUP_SUP_EQ\000\
  ARROW\000\
  DOT\000\
  EQ_EQ\000\
  EXCLAM_EQ\000\
  INF\000\
  SUP\000\
  INF_EQ\000\
  SUP_EQ\000\
  SLASH\000\
  PERCENT\000\
  PIPE\000\
  CIRC\000\
  PIPE_PIPE\000\
  INF_INF\000\
  SUP_SUP\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  COMMA\000\
  ELLIPSIS\000\
  QUEST\000\
  ELSE\000\
  LABEL__\000\
  BUILTIN_VA_LIST\000\
  BLOCKATTRIBUTE\000\
  PRAGMA_EOL\000\
  AT_NAME\000\
  "

let yynames_block = "\
  IDENT\000\
  CST_CHAR\000\
  CST_WCHAR\000\
  CST_INT\000\
  CST_FLOAT\000\
  NAMED_TYPE\000\
  CST_STRING\000\
  CST_WSTRING\000\
  CHAR\000\
  INT\000\
  DOUBLE\000\
  FLOAT\000\
  VOID\000\
  INT64\000\
  INT32\000\
  ENUM\000\
  STRUCT\000\
  TYPEDEF\000\
  UNION\000\
  SIGNED\000\
  UNSIGNED\000\
  LONG\000\
  SHORT\000\
  VOLATILE\000\
  EXTERN\000\
  STATIC\000\
  CONST\000\
  RESTRICT\000\
  AUTO\000\
  REGISTER\000\
  THREAD\000\
  SIZEOF\000\
  ALIGNOF\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  TILDE\000\
  AND\000\
  EXCLAM\000\
  AND_AND\000\
  PLUS_PLUS\000\
  MINUS_MINUS\000\
  LPAREN\000\
  RBRACE\000\
  LBRACE\000\
  SEMICOLON\000\
  BREAK\000\
  CONTINUE\000\
  GOTO\000\
  RETURN\000\
  SWITCH\000\
  CASE\000\
  DEFAULT\000\
  WHILE\000\
  DO\000\
  FOR\000\
  IF\000\
  TRY\000\
  EXCEPT\000\
  FINALLY\000\
  ATTRIBUTE\000\
  INLINE\000\
  ASM\000\
  TYPEOF\000\
  FUNCTION__\000\
  PRETTY_FUNCTION__\000\
  BUILTIN_VA_ARG\000\
  ATTRIBUTE_USED\000\
  BUILTIN_TYPES_COMPAT\000\
  BUILTIN_OFFSETOF\000\
  DECLSPEC\000\
  MSASM\000\
  MSATTR\000\
  PRAGMA_LINE\000\
  PRAGMA\000\
  AT_TRANSFORM\000\
  AT_TRANSFORMEXPR\000\
  AT_SPECIFIER\000\
  AT_EXPR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    Obj.repr(
# 393 "src/frontc/cparser.mly"
              (_1)
# 2704 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 395 "src/frontc/cparser.mly"
                 (_1)
# 2711 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 398 "src/frontc/cparser.mly"
                                        ( [] )
# 2717 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 399 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 2725 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition list) in
    Obj.repr(
# 400 "src/frontc/cparser.mly"
                                        ( _2 )
# 2733 "src/frontc/cparser.ml"
               : Cabs.definition list))
; (fun __caml_parser_env ->
    Obj.repr(
# 404 "src/frontc/cparser.mly"
                               ( currentLoc () )
# 2739 "src/frontc/cparser.ml"
               : Cabs.cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 409 "src/frontc/cparser.mly"
                                        ( _1 )
# 2746 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 410 "src/frontc/cparser.mly"
                                        ( _1 )
# 2753 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 413 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, (*handleLoc*) (snd _2), [ _3 ]) )
# 2762 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 415 "src/frontc/cparser.mly"
                                        ( LINKAGE (fst _2, (*handleLoc*) (snd _2), _4)  )
# 2773 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 417 "src/frontc/cparser.mly"
                                        ( GLOBASM (fst _3, (*handleLoc*) _1) )
# 2783 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pragma) in
    Obj.repr(
# 418 "src/frontc/cparser.mly"
                                        ( _1 )
# 2790 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'old_pardef_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 423 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in 
                             (* Make the function declarator *)
                             doDeclaration ((*handleLoc*) (snd _1)) []
                               [((fst _1, PROTO(JUSTBASE, pardecl,isva), [], cabslu),
                                 NO_INIT)]
                            )
# 2807 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 432 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             doDeclaration ((*handleLoc*)(snd _1)) []
                               [((fst _1, PROTO(JUSTBASE,[],false), [], cabslu),
                                 NO_INIT)]
                            )
# 2820 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.definition) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition list) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 438 "src/frontc/cparser.mly"
                                                                        (
    checkConnective(fst _5);
    TRANSFORMER(_3, _7, _1)
  )
# 2837 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 443 "src/frontc/cparser.mly"
                                                                                   (
    checkConnective(fst _5);
    EXPRTRANSFORMER(fst _3, fst _7, _1)
  )
# 2854 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 447 "src/frontc/cparser.mly"
                           ( PRAGMA (VARIABLE "parse_error", _1) )
# 2862 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 451 "src/frontc/cparser.mly"
             (fst _1)
# 2869 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 452 "src/frontc/cparser.mly"
                  (fst _1)
# 2876 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 453 "src/frontc/cparser.mly"
                                        ( "@name(" ^ fst _3 ^ ")" )
# 2884 "src/frontc/cparser.ml"
               : 'id_or_typename))
; (fun __caml_parser_env ->
    Obj.repr(
# 457 "src/frontc/cparser.mly"
                                        ( () )
# 2890 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    Obj.repr(
# 458 "src/frontc/cparser.mly"
                                        ( () )
# 2896 "src/frontc/cparser.ml"
               : 'maybecomma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 465 "src/frontc/cparser.mly"
          (VARIABLE (fst _1), snd _1)
# 2903 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.constant * cabsloc) in
    Obj.repr(
# 467 "src/frontc/cparser.mly"
          (CONSTANT (fst _1), snd _1)
# 2910 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 469 "src/frontc/cparser.mly"
          (PAREN (smooth_expression (fst _1)), snd _1)
# 2917 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 471 "src/frontc/cparser.mly"
          ( GNU_BODY (fst3 _2), _1 )
# 2925 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 475 "src/frontc/cparser.mly"
                         ( EXPR_PATTERN(fst _3), _1 )
# 2934 "src/frontc/cparser.ml"
               : 'primary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expression) in
    Obj.repr(
# 480 "src/frontc/cparser.mly"
                        ( _1 )
# 2941 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 482 "src/frontc/cparser.mly"
   (INDEX (fst _1, smooth_expression _2), snd _1)
# 2949 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list) in
    Obj.repr(
# 484 "src/frontc/cparser.mly"
   (CALL (fst _1, _3), snd _1)
# 2958 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 486 "src/frontc/cparser.mly"
                        ( let b, d = _5 in
                          CALL (VARIABLE "__builtin_va_arg", 
                                [fst _3; TYPE_SIZEOF (b, d)]), _1 )
# 2970 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 490 "src/frontc/cparser.mly"
                        ( let b1,d1 = _3 in
                          let b2,d2 = _5 in
                          CALL (VARIABLE "__builtin_types_compatible_p", 
                                [TYPE_SIZEOF(b1,d1); TYPE_SIZEOF(b2,d2)]), _1 )
# 2983 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.spec_elem list * Cabs.decl_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    Obj.repr(
# 495 "src/frontc/cparser.mly"
                        ( transformOffsetOf _3 _5, _1 )
# 2993 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 497 "src/frontc/cparser.mly"
          (MEMBEROF (fst _1, _3), snd _1)
# 3001 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 499 "src/frontc/cparser.mly"
          (MEMBEROFPTR (fst _1, _3), snd _1)
# 3009 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 501 "src/frontc/cparser.mly"
          (UNARY (POSINCR, fst _1), snd _1)
# 3017 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'postfix_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 503 "src/frontc/cparser.mly"
          (UNARY (POSDECR, fst _1), snd _1)
# 3025 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 506 "src/frontc/cparser.mly"
          ( CAST(_2, COMPOUND_INIT _5), _1 )
# 3036 "src/frontc/cparser.ml"
               : 'postfix_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 511 "src/frontc/cparser.mly"
          ( VARIABLE (_1) )
# 3043 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'offsetof_member_designator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 513 "src/frontc/cparser.mly"
   ( MEMBEROF (_1, fst _3) )
# 3051 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'offsetof_member_designator) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list) in
    Obj.repr(
# 515 "src/frontc/cparser.mly"
   ( INDEX (_1, smooth_expression _2) )
# 3059 "src/frontc/cparser.ml"
               : 'offsetof_member_designator))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_expression) in
    Obj.repr(
# 520 "src/frontc/cparser.mly"
                        ( _1 )
# 3066 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 522 "src/frontc/cparser.mly"
          (UNARY (PREINCR, fst _2), _1)
# 3074 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 524 "src/frontc/cparser.mly"
          (UNARY (PREDECR, fst _2), _1)
# 3082 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 526 "src/frontc/cparser.mly"
          (EXPR_SIZEOF (fst _2), _1)
# 3090 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 528 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_SIZEOF (b, d), _1)
# 3099 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 530 "src/frontc/cparser.mly"
          (EXPR_ALIGNOF (fst _2), _1)
# 3107 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 532 "src/frontc/cparser.mly"
          (let b, d = _3 in TYPE_ALIGNOF (b, d), _1)
# 3116 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 534 "src/frontc/cparser.mly"
          (UNARY (PLUS, fst _2), _1)
# 3124 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 536 "src/frontc/cparser.mly"
          (UNARY (MINUS, fst _2), _1)
# 3132 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 538 "src/frontc/cparser.mly"
          (UNARY (MEMOF, fst _2), _1)
# 3140 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 540 "src/frontc/cparser.mly"
          (UNARY (ADDROF, fst _2), _1)
# 3148 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 542 "src/frontc/cparser.mly"
          (UNARY (NOT, fst _2), _1)
# 3156 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 544 "src/frontc/cparser.mly"
          (UNARY (BNOT, fst _2), _1)
# 3164 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 545 "src/frontc/cparser.mly"
                               ( LABELADDR (fst _2), _1 )
# 3172 "src/frontc/cparser.ml"
               : 'unary_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 550 "src/frontc/cparser.mly"
                         ( _1 )
# 3179 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.spec_elem list * Cabs.decl_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 552 "src/frontc/cparser.mly"
           ( CAST(_2, SINGLE_INIT (fst _4)), _1 )
# 3188 "src/frontc/cparser.ml"
               : 'cast_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 557 "src/frontc/cparser.mly"
                         ( _1 )
# 3195 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 559 "src/frontc/cparser.mly"
   (BINARY(MUL, fst _1, fst _3), snd _1)
# 3204 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 561 "src/frontc/cparser.mly"
   (BINARY(DIV, fst _1, fst _3), snd _1)
# 3212 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_expression) in
    Obj.repr(
# 563 "src/frontc/cparser.mly"
   (BINARY(MOD, fst _1, fst _3), snd _1)
# 3220 "src/frontc/cparser.ml"
               : 'multiplicative_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 568 "src/frontc/cparser.mly"
                        ( _1 )
# 3227 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 570 "src/frontc/cparser.mly"
   (BINARY(ADD, fst _1, fst _3), snd _1)
# 3236 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_expression) in
    Obj.repr(
# 572 "src/frontc/cparser.mly"
   (BINARY(SUB, fst _1, fst _3), snd _1)
# 3245 "src/frontc/cparser.ml"
               : 'additive_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 577 "src/frontc/cparser.mly"
                         ( _1 )
# 3252 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 579 "src/frontc/cparser.mly"
   (BINARY(SHL, fst _1, fst _3), snd _1)
# 3260 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_expression) in
    Obj.repr(
# 581 "src/frontc/cparser.mly"
   (BINARY(SHR, fst _1, fst _3), snd _1)
# 3268 "src/frontc/cparser.ml"
               : 'shift_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 587 "src/frontc/cparser.mly"
                        ( _1 )
# 3275 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 589 "src/frontc/cparser.mly"
   (BINARY(LT, fst _1, fst _3), snd _1)
# 3283 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 591 "src/frontc/cparser.mly"
   (BINARY(GT, fst _1, fst _3), snd _1)
# 3291 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 593 "src/frontc/cparser.mly"
   (BINARY(LE, fst _1, fst _3), snd _1)
# 3299 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expression) in
    Obj.repr(
# 595 "src/frontc/cparser.mly"
   (BINARY(GE, fst _1, fst _3), snd _1)
# 3307 "src/frontc/cparser.ml"
               : 'relational_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 600 "src/frontc/cparser.mly"
                        ( _1 )
# 3314 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 602 "src/frontc/cparser.mly"
   (BINARY(EQ, fst _1, fst _3), snd _1)
# 3322 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_expression) in
    Obj.repr(
# 604 "src/frontc/cparser.mly"
   (BINARY(NE, fst _1, fst _3), snd _1)
# 3330 "src/frontc/cparser.ml"
               : 'equality_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 610 "src/frontc/cparser.mly"
                       ( _1 )
# 3337 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_expression) in
    Obj.repr(
# 612 "src/frontc/cparser.mly"
   (BINARY(BAND, fst _1, fst _3), snd _1)
# 3346 "src/frontc/cparser.ml"
               : 'bitwise_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 617 "src/frontc/cparser.mly"
                       ( _1 )
# 3353 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_expression) in
    Obj.repr(
# 619 "src/frontc/cparser.mly"
   (BINARY(XOR, fst _1, fst _3), snd _1)
# 3361 "src/frontc/cparser.ml"
               : 'bitwise_xor_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 624 "src/frontc/cparser.mly"
                        ( _1 )
# 3368 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_expression) in
    Obj.repr(
# 626 "src/frontc/cparser.mly"
   (BINARY(BOR, fst _1, fst _3), snd _1)
# 3376 "src/frontc/cparser.ml"
               : 'bitwise_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 631 "src/frontc/cparser.mly"
                        ( _1 )
# 3383 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_expression) in
    Obj.repr(
# 633 "src/frontc/cparser.mly"
   (BINARY(AND, fst _1, fst _3), snd _1)
# 3392 "src/frontc/cparser.ml"
               : 'logical_and_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 638 "src/frontc/cparser.mly"
                        ( _1 )
# 3399 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_expression) in
    Obj.repr(
# 640 "src/frontc/cparser.mly"
   (BINARY(OR, fst _1, fst _3), snd _1)
# 3407 "src/frontc/cparser.ml"
               : 'logical_or_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_expression) in
    Obj.repr(
# 645 "src/frontc/cparser.mly"
                         ( _1 )
# 3414 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 647 "src/frontc/cparser.mly"
   (QUESTION (fst _1, _3, fst _5), snd _1)
# 3423 "src/frontc/cparser.ml"
               : 'conditional_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_expression) in
    Obj.repr(
# 655 "src/frontc/cparser.mly"
                         ( _1 )
# 3430 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 657 "src/frontc/cparser.mly"
   (BINARY(ASSIGN, fst _1, fst _3), snd _1)
# 3438 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 659 "src/frontc/cparser.mly"
   (BINARY(ADD_ASSIGN, fst _1, fst _3), snd _1)
# 3446 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 661 "src/frontc/cparser.mly"
   (BINARY(SUB_ASSIGN, fst _1, fst _3), snd _1)
# 3454 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 663 "src/frontc/cparser.mly"
   (BINARY(MUL_ASSIGN, fst _1, fst _3), snd _1)
# 3462 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 665 "src/frontc/cparser.mly"
   (BINARY(DIV_ASSIGN, fst _1, fst _3), snd _1)
# 3470 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 667 "src/frontc/cparser.mly"
   (BINARY(MOD_ASSIGN, fst _1, fst _3), snd _1)
# 3478 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 669 "src/frontc/cparser.mly"
   (BINARY(BAND_ASSIGN, fst _1, fst _3), snd _1)
# 3486 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 671 "src/frontc/cparser.mly"
   (BINARY(BOR_ASSIGN, fst _1, fst _3), snd _1)
# 3494 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 673 "src/frontc/cparser.mly"
   (BINARY(XOR_ASSIGN, fst _1, fst _3), snd _1)
# 3502 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 675 "src/frontc/cparser.mly"
   (BINARY(SHL_ASSIGN, fst _1, fst _3), snd _1)
# 3510 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cast_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 677 "src/frontc/cparser.mly"
   (BINARY(SHR_ASSIGN, fst _1, fst _3), snd _1)
# 3518 "src/frontc/cparser.ml"
               : 'assignment_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_expression) in
    Obj.repr(
# 682 "src/frontc/cparser.mly"
                        ( _1 )
# 3525 "src/frontc/cparser.ml"
               : Cabs.expression * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 687 "src/frontc/cparser.mly"
               (CONST_INT (fst _1), snd _1)
# 3532 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 688 "src/frontc/cparser.mly"
                 (CONST_FLOAT (fst _1), snd _1)
# 3539 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 689 "src/frontc/cparser.mly"
                (CONST_CHAR (fst _1), snd _1)
# 3546 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 690 "src/frontc/cparser.mly"
                 (CONST_WCHAR (fst _1), snd _1)
# 3553 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 691 "src/frontc/cparser.mly"
                             (CONST_STRING (fst _1), snd _1)
# 3560 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * cabsloc) in
    Obj.repr(
# 692 "src/frontc/cparser.mly"
                   (CONST_WSTRING (fst _1), snd _1)
# 3567 "src/frontc/cparser.ml"
               : Cabs.constant * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list Queue.t * cabsloc) in
    Obj.repr(
# 698 "src/frontc/cparser.mly"
                                        (
     let queue, location = _1 in
     let buffer = Buffer.create (Queue.length queue) in
     Queue.iter
       (List.iter
	  (fun value ->
	    let char = int64_to_char value in
	    Buffer.add_char buffer char))
       queue;
     Buffer.contents buffer, location
   )
# 3584 "src/frontc/cparser.ml"
               : string * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 712 "src/frontc/cparser.mly"
                                        (intlist_to_string (fst _1) )
# 3591 "src/frontc/cparser.ml"
               : 'one_string_constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 715 "src/frontc/cparser.mly"
                                        (
      let queue = Queue.create () in
      Queue.add (fst _1) queue;
      queue, snd _1
    )
# 3602 "src/frontc/cparser.ml"
               : int64 list Queue.t * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list Queue.t * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 720 "src/frontc/cparser.mly"
                                        (
      Queue.add (fst _2) (fst _1);
      _1
    )
# 3613 "src/frontc/cparser.ml"
               : int64 list Queue.t * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 727 "src/frontc/cparser.mly"
                                        ( _1 )
# 3620 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'one_string) in
    Obj.repr(
# 728 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3628 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : int64 list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 729 "src/frontc/cparser.mly"
                                        ( (fst _1) @ (fst _2), snd _1 )
# 3636 "src/frontc/cparser.ml"
               : int64 list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int64 list * Cabs.cabsloc) in
    Obj.repr(
# 734 "src/frontc/cparser.mly"
                  (_1)
# 3643 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 735 "src/frontc/cparser.mly"
                                        ((Cabshelper.explodeStringToInts 
					    !currentFunctionName), _1)
# 3651 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 737 "src/frontc/cparser.mly"
                                        ((Cabshelper.explodeStringToInts 
					    !currentFunctionName), _1)
# 3659 "src/frontc/cparser.ml"
               : 'one_string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 742 "src/frontc/cparser.mly"
                        ( SINGLE_INIT (fst _1) )
# 3666 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'initializer_list_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 744 "src/frontc/cparser.mly"
   ( COMPOUND_INIT _2)
# 3675 "src/frontc/cparser.ml"
               : Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat * Cabs.init_expression) in
    Obj.repr(
# 747 "src/frontc/cparser.mly"
                                            ( [_1] )
# 3682 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat * Cabs.init_expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'initializer_list_opt) in
    Obj.repr(
# 748 "src/frontc/cparser.mly"
                                            ( _1 :: _3 )
# 3690 "src/frontc/cparser.ml"
               : (Cabs.initwhat * Cabs.init_expression) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 751 "src/frontc/cparser.mly"
                                            ( [] )
# 3696 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.initwhat * Cabs.init_expression) list) in
    Obj.repr(
# 752 "src/frontc/cparser.mly"
                                            ( _1 )
# 3703 "src/frontc/cparser.ml"
               : 'initializer_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.initwhat) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'eq_opt) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 755 "src/frontc/cparser.mly"
                                            ( (_1, _3) )
# 3712 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gcc_init_designators) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 756 "src/frontc/cparser.mly"
                                         ( (_1, _2) )
# 3720 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 757 "src/frontc/cparser.mly"
                                        ( (NEXT_INIT, _1) )
# 3727 "src/frontc/cparser.ml"
               : Cabs.initwhat * Cabs.init_expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 760 "src/frontc/cparser.mly"
                             ( () )
# 3733 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 762 "src/frontc/cparser.mly"
                                 ( () )
# 3739 "src/frontc/cparser.ml"
               : 'eq_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 765 "src/frontc/cparser.mly"
                                                 ( INFIELD_INIT(_2, _3) )
# 3747 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 767 "src/frontc/cparser.mly"
                                        ( ATINDEX_INIT(fst _2, _4) )
# 3755 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 769 "src/frontc/cparser.mly"
                                        ( ATINDEXRANGE_INIT(fst _2, fst _4) )
# 3763 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    Obj.repr(
# 772 "src/frontc/cparser.mly"
                                        ( NEXT_INIT )
# 3769 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.initwhat) in
    Obj.repr(
# 773 "src/frontc/cparser.mly"
                                        ( _1 )
# 3776 "src/frontc/cparser.ml"
               : Cabs.initwhat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id_or_typename) in
    Obj.repr(
# 777 "src/frontc/cparser.mly"
                                        ( INFIELD_INIT(_1, NEXT_INIT) )
# 3783 "src/frontc/cparser.ml"
               : 'gcc_init_designators))
; (fun __caml_parser_env ->
    Obj.repr(
# 781 "src/frontc/cparser.mly"
                                    ( [] )
# 3789 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 782 "src/frontc/cparser.mly"
                                    ( fst _1 )
# 3796 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 787 "src/frontc/cparser.mly"
          (NOTHING)
# 3802 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 789 "src/frontc/cparser.mly"
          (smooth_expression (fst _1))
# 3809 "src/frontc/cparser.ml"
               : Cabs.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 793 "src/frontc/cparser.mly"
                                           ([fst _1], snd _1)
# 3816 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 794 "src/frontc/cparser.mly"
                                                  ( fst _1 :: fst _3, snd _1 )
# 3824 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 795 "src/frontc/cparser.mly"
                                                  ( _3 )
# 3831 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 799 "src/frontc/cparser.mly"
                                    ( NOTHING )
# 3837 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 800 "src/frontc/cparser.mly"
                                    ( smooth_expression (fst _1) )
# 3844 "src/frontc/cparser.ml"
               : 'comma_expression_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 804 "src/frontc/cparser.mly"
                                                   ( _2 )
# 3852 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 805 "src/frontc/cparser.mly"
                                                   ( [], _1 )
# 3859 "src/frontc/cparser.ml"
               : Cabs.expression list * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    Obj.repr(
# 809 "src/frontc/cparser.mly"
                                                       ( fst _2 )
# 3866 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    Obj.repr(
# 810 "src/frontc/cparser.mly"
                                                       ( [] )
# 3872 "src/frontc/cparser.ml"
               : Cabs.expression list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'block_begin) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'block_attrs) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 817 "src/frontc/cparser.mly"
                                         (!Lexerhack.pop_context();
                                          { blabels = _2;
                                            battrs = _3;
                                            bstmts = _4 },
					    _1, _5
                                         )
# 3888 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 823 "src/frontc/cparser.mly"
                                         ( { blabels = [];
                                             battrs  = [];
                                             bstmts  = [] },
					     _2, _3
                                         )
# 3900 "src/frontc/cparser.ml"
               : Cabs.block * cabsloc * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 830 "src/frontc/cparser.mly"
                           (!Lexerhack.push_context (); _1)
# 3907 "src/frontc/cparser.ml"
               : 'block_begin))
; (fun __caml_parser_env ->
    Obj.repr(
# 834 "src/frontc/cparser.mly"
                                                            ( [] )
# 3913 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 836 "src/frontc/cparser.mly"
                                        ( [("__blockattribute__", _2)] )
# 3920 "src/frontc/cparser.ml"
               : 'block_attrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 841 "src/frontc/cparser.mly"
                                         ( [] )
# 3926 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 842 "src/frontc/cparser.mly"
                                         ( DEFINITION(_1) :: _2 )
# 3934 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.statement) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 843 "src/frontc/cparser.mly"
                                         ( _1 :: _2 )
# 3942 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 845 "src/frontc/cparser.mly"
                                         ( [ LABEL (fst _1, NOP (snd _1), 
                                                    snd _1)] )
# 3950 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement list) in
    Obj.repr(
# 847 "src/frontc/cparser.mly"
                                         ( _2 )
# 3958 "src/frontc/cparser.ml"
               : Cabs.statement list))
; (fun __caml_parser_env ->
    Obj.repr(
# 851 "src/frontc/cparser.mly"
                                                     ( [] )
# 3964 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 852 "src/frontc/cparser.mly"
                                                     ( _2 @ _4 )
# 3973 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 855 "src/frontc/cparser.mly"
                                         ( [ fst _1 ] )
# 3980 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 856 "src/frontc/cparser.mly"
                                         ( fst _1 :: _3 )
# 3988 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 862 "src/frontc/cparser.mly"
               (NOP ((*handleLoc*) _1) )
# 3995 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 864 "src/frontc/cparser.mly"
          (COMPUTATION (smooth_expression (fst _1), (*handleLoc*)(snd _1)))
# 4003 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 865 "src/frontc/cparser.mly"
                        (BLOCK (fst3 _1, (*handleLoc*)(snd3 _1)))
# 4010 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 867 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _3, NOP _1, _1))
# 4019 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 869 "src/frontc/cparser.mly"
                 (IF (smooth_expression (fst _2), _3, _5, (*handleLoc*) _1))
# 4029 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 871 "src/frontc/cparser.mly"
                        (SWITCH (smooth_expression (fst _2), _3, (*handleLoc*) _1))
# 4038 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 873 "src/frontc/cparser.mly"
          (WHILE (smooth_expression (fst _2), _3, (*handleLoc*) _1))
# 4047 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 875 "src/frontc/cparser.mly"
                   (DOWHILE (smooth_expression (fst _4), _2, (*handleLoc*) _1))
# 4058 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'for_clause) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 878 "src/frontc/cparser.mly"
                          (FOR (_3, _4, _6, _8, (*handleLoc*) _1))
# 4071 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 880 "src/frontc/cparser.mly"
                   ((* The only attribute that should appear here
                                     is "unused". For now, we drop this on the
                                     floor, since unused labels are usually
                                     removed anyways by Rmtmps. *)
                                  LABEL (fst _1, _4, (snd _1)))
# 4084 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 886 "src/frontc/cparser.mly"
                          (CASE (fst _2, _4, (*handleLoc*) _1))
# 4093 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.expression * cabsloc) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.statement) in
    Obj.repr(
# 888 "src/frontc/cparser.mly"
                          (CASERANGE (fst _2, fst _4, _6, (*handleLoc*) _1))
# 4103 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 890 "src/frontc/cparser.mly"
                          (DEFAULT (NOP _1, (*handleLoc*) _1))
# 4110 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 891 "src/frontc/cparser.mly"
                       (RETURN (NOTHING, (*handleLoc*) _1))
# 4118 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 893 "src/frontc/cparser.mly"
                          (RETURN (smooth_expression (fst _2), (*handleLoc*) _1))
# 4127 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 894 "src/frontc/cparser.mly"
                        (BREAK ((*handleLoc*) _1))
# 4135 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 895 "src/frontc/cparser.mly"
                        (CONTINUE ((*handleLoc*) _1))
# 4143 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 897 "src/frontc/cparser.mly"
                   (GOTO (fst _2, (*handleLoc*) _1))
# 4152 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 899 "src/frontc/cparser.mly"
                                 ( COMPGOTO (smooth_expression (fst _3), (*handleLoc*) _1) )
# 4162 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'asmtemplate) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'asmoutputs) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 901 "src/frontc/cparser.mly"
                        ( ASM (_2, _4, _5, (*handleLoc*) _1) )
# 4174 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 902 "src/frontc/cparser.mly"
                        ( ASM ([], [fst _1], None, (*handleLoc*)(snd _1)))
# 4181 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression list * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 904 "src/frontc/cparser.mly"
                        ( let b, _, _ = _2 in
                          let h, _, _ = _5 in
                          if not !Cprint.msvcMode then 
                            parse_error "try/except in GCC code";
                          TRY_EXCEPT (b, COMMA (fst _4), h, (*handleLoc*) _1) )
# 4196 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.block * cabsloc * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 910 "src/frontc/cparser.mly"
                        ( let b, _, _ = _2 in
                          let h, _, _ = _4 in
                          if not !Cprint.msvcMode then 
                            parse_error "try/finally in GCC code";
                          TRY_FINALLY (b, h, (*handleLoc*) _1) )
# 4210 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 916 "src/frontc/cparser.mly"
                                 ( (NOP _2))
# 4218 "src/frontc/cparser.ml"
               : Cabs.statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 921 "src/frontc/cparser.mly"
                                 ( FC_EXP _1 )
# 4226 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.definition) in
    Obj.repr(
# 922 "src/frontc/cparser.mly"
                                 ( FC_DECL _1 )
# 4233 "src/frontc/cparser.ml"
               : 'for_clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.init_name list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 927 "src/frontc/cparser.mly"
                                       ( doDeclaration ((*handleLoc*)(snd _1)) (fst _1) _2 )
# 4242 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 929 "src/frontc/cparser.mly"
                                       ( doDeclaration ((*handleLoc*)(snd _1)) (fst _1) [] )
# 4250 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name) in
    Obj.repr(
# 932 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 4257 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.init_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_name list) in
    Obj.repr(
# 933 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 4265 "src/frontc/cparser.ml"
               : Cabs.init_name list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 937 "src/frontc/cparser.mly"
                                        ( (_1, NO_INIT) )
# 4272 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.init_expression) in
    Obj.repr(
# 939 "src/frontc/cparser.mly"
                                        ( (_1, _3) )
# 4280 "src/frontc/cparser.ml"
               : Cabs.init_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 944 "src/frontc/cparser.mly"
                                        ( SpecTypedef :: _2, _1  )
# 4288 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 945 "src/frontc/cparser.mly"
                                        ( SpecStorage EXTERN :: _2, _1 )
# 4296 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 946 "src/frontc/cparser.mly"
                                        ( SpecStorage STATIC :: _2, _1 )
# 4304 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 947 "src/frontc/cparser.mly"
                                        ( SpecStorage AUTO :: _2, _1 )
# 4312 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 948 "src/frontc/cparser.mly"
                                        ( SpecStorage REGISTER :: _2, _1)
# 4320 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : typeSpecifier * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt_no_named) in
    Obj.repr(
# 950 "src/frontc/cparser.mly"
                                          ( SpecType (fst _1) :: _2, snd _1 )
# 4328 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 952 "src/frontc/cparser.mly"
                                        ( SpecInline :: _2, _1 )
# 4336 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 953 "src/frontc/cparser.mly"
                                        ( (fst _1) :: _2, snd _1 )
# 4344 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl_spec_list_opt) in
    Obj.repr(
# 954 "src/frontc/cparser.mly"
                                        ( SpecAttr (fst _1) :: _2, snd _1 )
# 4352 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 956 "src/frontc/cparser.mly"
                                        ( [ SpecPattern(fst _3) ], _1 )
# 4361 "src/frontc/cparser.ml"
               : spec_elem list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 961 "src/frontc/cparser.mly"
                                        ( [] )
# 4367 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 962 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 4374 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 969 "src/frontc/cparser.mly"
                                        ( [] )
# 4380 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 970 "src/frontc/cparser.mly"
                                        ( fst _1 )
# 4387 "src/frontc/cparser.ml"
               : 'decl_spec_list_opt_no_named))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 973 "src/frontc/cparser.mly"
                    ( Tvoid, _1)
# 4394 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 974 "src/frontc/cparser.mly"
                    ( Tchar, _1 )
# 4401 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 975 "src/frontc/cparser.mly"
                    ( Tshort, _1 )
# 4408 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 976 "src/frontc/cparser.mly"
                    ( Tint, _1 )
# 4415 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 977 "src/frontc/cparser.mly"
                    ( Tlong, _1 )
# 4422 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 978 "src/frontc/cparser.mly"
                    ( Tint64, _1 )
# 4429 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 979 "src/frontc/cparser.mly"
                    ( Tfloat, _1 )
# 4436 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 980 "src/frontc/cparser.mly"
                    ( Tdouble, _1 )
# 4443 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 981 "src/frontc/cparser.mly"
                    ( Tsigned, _1 )
# 4450 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 982 "src/frontc/cparser.mly"
                    ( Tunsigned, _1 )
# 4457 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 984 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, None,    []), _1 )
# 4465 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 986 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, None,    _2), _1 )
# 4474 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 988 "src/frontc/cparser.mly"
                                                   ( Tstruct (_2, Some _4, []), _1 )
# 4485 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 990 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", Some _3, []), _1 )
# 4495 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 992 "src/frontc/cparser.mly"
                                                   ( Tstruct (_3, Some _5, _2), _1 )
# 4507 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 994 "src/frontc/cparser.mly"
                                                   ( Tstruct ("", Some _4, _2), _1 )
# 4518 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 996 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, None,    []), _1 )
# 4526 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 998 "src/frontc/cparser.mly"
                                                   ( Tunion  (_2, Some _4, []), _1 )
# 4537 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1000 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", Some _3, []), _1 )
# 4547 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1002 "src/frontc/cparser.mly"
                                                   ( Tunion  (_3, Some _5, _2), _1 )
# 4559 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.field_group list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1004 "src/frontc/cparser.mly"
                                                   ( Tunion  ("", Some _4, _2), _1 )
# 4570 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1006 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, None,    []), _1 )
# 4578 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1008 "src/frontc/cparser.mly"
                                                   ( Tenum   (_2, Some _4, []), _1 )
# 4590 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1010 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _3, []), _1 )
# 4601 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'id_or_typename) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1012 "src/frontc/cparser.mly"
                                                   ( Tenum   (_3, Some _5, _2), _1 )
# 4614 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'just_attributes) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'maybecomma) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1014 "src/frontc/cparser.mly"
                                                   ( Tenum   ("", Some _4, _2), _1 )
# 4626 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1015 "src/frontc/cparser.mly"
                    ( Tnamed (fst _1), snd _1 )
# 4633 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1016 "src/frontc/cparser.mly"
                                        ( TtypeofE (fst _3), _1 )
# 4642 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1017 "src/frontc/cparser.mly"
                                        ( let s, d = _3 in
                                          TtypeofT (s, d), _1 )
# 4652 "src/frontc/cparser.ml"
               : typeSpecifier * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1023 "src/frontc/cparser.mly"
                                         ( [] )
# 4658 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1025 "src/frontc/cparser.mly"
                                         ( (fst _1, 
                                            [(missingFieldDecl, None)]) :: _3 )
# 4668 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1029 "src/frontc/cparser.mly"
                                         ( _2 )
# 4676 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : (Cabs.name * expression option) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1031 "src/frontc/cparser.mly"
                                          ( (fst _1, _2) 
                                            :: _4 )
# 4687 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'pragma) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1034 "src/frontc/cparser.mly"
                                          ( _2 )
# 4695 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.field_group list) in
    Obj.repr(
# 1037 "src/frontc/cparser.mly"
                                          ( _3 )
# 4703 "src/frontc/cparser.ml"
               : Cabs.field_group list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name * expression option) in
    Obj.repr(
# 1040 "src/frontc/cparser.mly"
                                         ( [_1] )
# 4710 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name * expression option) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (Cabs.name * expression option) list) in
    Obj.repr(
# 1041 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 4718 "src/frontc/cparser.ml"
               : (Cabs.name * expression option) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1044 "src/frontc/cparser.mly"
                                    ( (_1, None) )
# 4725 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1046 "src/frontc/cparser.mly"
                                    ( let (n,decl,al,loc) = _1 in
                                      let al' = al @ _4 in
                                     ((n,decl,al',loc), Some (fst _3)) )
# 4736 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1049 "src/frontc/cparser.mly"
                                    ( (missingFieldDecl, Some (fst _2)) )
# 4743 "src/frontc/cparser.ml"
               : Cabs.name * expression option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1053 "src/frontc/cparser.mly"
                  ([_1])
# 4750 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.enum_item) in
    Obj.repr(
# 1054 "src/frontc/cparser.mly"
                                       (_1 @ [_3])
# 4758 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.enum_item list) in
    Obj.repr(
# 1055 "src/frontc/cparser.mly"
                                        ( _1 )
# 4765 "src/frontc/cparser.ml"
               : Cabs.enum_item list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1058 "src/frontc/cparser.mly"
            ((fst _1, NOTHING, snd _1))
# 4772 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1059 "src/frontc/cparser.mly"
                         ((fst _1, fst _3, snd _1))
# 4780 "src/frontc/cparser.ml"
               : Cabs.enum_item))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1065 "src/frontc/cparser.mly"
                               ( let (n, decl) = _2 in
                                (n, applyPointer (fst _1) decl, _3, (snd _1)) )
# 4790 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1073 "src/frontc/cparser.mly"
                                   ( (_1, JUSTBASE) )
# 4797 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.name) in
    Obj.repr(
# 1076 "src/frontc/cparser.mly"
                                   ( let (n,decl,al,loc) = _3 in
                                     (n, PARENTYPE(_2,decl,al)) )
# 4807 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1080 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, _4)) )
# 4817 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    Obj.repr(
# 1083 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     (n, ARRAY(decl, _3, NOTHING)) )
# 4826 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1086 "src/frontc/cparser.mly"
                                   ( let (n, decl) = _1 in
                                     let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     (n, PROTO(decl, params, isva))
                                   )
# 4839 "src/frontc/cparser.ml"
               : string * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1093 "src/frontc/cparser.mly"
                                   ( !Lexerhack.push_context () )
# 4846 "src/frontc/cparser.ml"
               : 'parameter_list_startscope))
; (fun __caml_parser_env ->
    Obj.repr(
# 1096 "src/frontc/cparser.mly"
                                   ( ([], false) )
# 4852 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1097 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _2 in 
                                     (_1 :: params, isva) 
                                   )
# 4862 "src/frontc/cparser.ml"
               : 'rest_par_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1102 "src/frontc/cparser.mly"
                                        ( ([], false) )
# 4868 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    Obj.repr(
# 1103 "src/frontc/cparser.mly"
                                        ( ([], true) )
# 4874 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rest_par_list1) in
    Obj.repr(
# 1104 "src/frontc/cparser.mly"
                                        ( let (params, isva) = _3 in 
                                          (_2 :: params, isva)
                                        )
# 4884 "src/frontc/cparser.ml"
               : 'rest_par_list1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1111 "src/frontc/cparser.mly"
                                          ( (fst _1, _2) )
# 4892 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1112 "src/frontc/cparser.mly"
                                          ( let d, a = _2 in
                                            (fst _1, ("", d, a, cabslu)) )
# 4901 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1114 "src/frontc/cparser.mly"
                                          ( (fst _1, ("", JUSTBASE, [], cabslu)) )
# 4908 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.single_name) in
    Obj.repr(
# 1115 "src/frontc/cparser.mly"
                                          ( _2 )
# 4916 "src/frontc/cparser.ml"
               : Cabs.single_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'direct_old_proto_decl) in
    Obj.repr(
# 1120 "src/frontc/cparser.mly"
                                      ( let (n, decl, a) = _2 in
					  (n, applyPointer (fst _1) decl, 
                                           a, snd _1) 
                                      )
# 4927 "src/frontc/cparser.ml"
               : Cabs.name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1129 "src/frontc/cparser.mly"
                                   ( let par_decl, isva = doOldParDecl _3 _5 in
                                     let n, decl = _1 in
                                     (n, PROTO(decl, par_decl, isva), [])
                                   )
# 4940 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1134 "src/frontc/cparser.mly"
                                   ( let n, decl = _1 in
                                     (n, PROTO(decl, [], false), [])
                                   )
# 4950 "src/frontc/cparser.ml"
               : 'direct_old_proto_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1149 "src/frontc/cparser.mly"
                                               ( [fst _1] )
# 4957 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 1150 "src/frontc/cparser.mly"
                                               ( let rest = _3 in
                                                 (fst _1 :: rest) )
# 4966 "src/frontc/cparser.ml"
               : string list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1155 "src/frontc/cparser.mly"
                                          ( ([], false) )
# 4972 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1157 "src/frontc/cparser.mly"
                                          ( ([(fst _1, _2)], true) )
# 4981 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'old_pardef) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1159 "src/frontc/cparser.mly"
                                          ( let rest, isva = _4 in
                                            ((fst _1, _2) :: rest, isva) 
                                          )
# 4993 "src/frontc/cparser.ml"
               : 'old_pardef_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1165 "src/frontc/cparser.mly"
                                          ( [_1] )
# 5000 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef) in
    Obj.repr(
# 1166 "src/frontc/cparser.mly"
                                          ( _1 :: _3 )
# 5008 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    Obj.repr(
# 1167 "src/frontc/cparser.mly"
                                          ( [] )
# 5014 "src/frontc/cparser.ml"
               : 'old_pardef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1172 "src/frontc/cparser.mly"
                                ( _2 :: fst _3, _1 )
# 5023 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1175 "src/frontc/cparser.mly"
                                 ( let l = currentLoc () in
                                   ([], l) )
# 5030 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1177 "src/frontc/cparser.mly"
                                 ( _1 )
# 5037 "src/frontc/cparser.ml"
               : attribute list list * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1181 "src/frontc/cparser.mly"
                               ( let d, a = _2 in
                                 if a <> [] then begin
                                   parse_error "attributes in type name";
                                   raise Parsing.Parse_error
                                 end;
                                 (fst _1, d) 
                               )
# 5051 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : spec_elem list * cabsloc) in
    Obj.repr(
# 1188 "src/frontc/cparser.mly"
                               ( (fst _1, JUSTBASE) )
# 5058 "src/frontc/cparser.ml"
               : Cabs.spec_elem list * Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : attribute list list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1191 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) _2, _3 )
# 5067 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : attribute list list * cabsloc) in
    Obj.repr(
# 1192 "src/frontc/cparser.mly"
                                          ( applyPointer (fst _1) JUSTBASE, [] )
# 5074 "src/frontc/cparser.ml"
               : Cabs.decl_type * Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.attribute list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.decl_type * Cabs.attribute list) in
    Obj.repr(
# 1199 "src/frontc/cparser.mly"
                                   ( let d, a = _3 in
                                     PARENTYPE (_2, d, a)
                                   )
# 5085 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1204 "src/frontc/cparser.mly"
                                   ( JUSTBASE )
# 5092 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'comma_expression_opt) in
    Obj.repr(
# 1207 "src/frontc/cparser.mly"
                                   ( ARRAY(_1, [], _3) )
# 5100 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.decl_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1210 "src/frontc/cparser.mly"
                                   ( let (params, isva) = _3 in
                                     !Lexerhack.pop_context ();
                                     PROTO (_1, params, isva)
                                   )
# 5112 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.decl_type) in
    Obj.repr(
# 1216 "src/frontc/cparser.mly"
                                    ( _1 )
# 5119 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 1217 "src/frontc/cparser.mly"
                                    ( JUSTBASE )
# 5125 "src/frontc/cparser.ml"
               : Cabs.decl_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : cabsloc * spec_elem list * name) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.block * cabsloc * cabsloc) in
    Obj.repr(
# 1221 "src/frontc/cparser.mly"
          ( let (loc, specs, decl) = _1 in
            currentFunctionName := "<__FUNCTION__ used outside any functions>";
            !Lexerhack.pop_context (); (* The context pushed by 
                                    * announceFunctionName *)
            doFunctionDef ((*handleLoc*) loc) (trd3 _2) specs decl (fst3 _2)
          )
# 5138 "src/frontc/cparser.ml"
               : Cabs.definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1231 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 5148 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : spec_elem list * cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.name) in
    Obj.repr(
# 1237 "src/frontc/cparser.mly"
                            ( announceFunctionName _2;
                              (snd _1, fst _1, _2)
                            )
# 5158 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'parameter_list_startscope) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'rest_par_list) in
    Obj.repr(
# 1242 "src/frontc/cparser.mly"
                           ( let (params, isva) = _3 in
                             let fdec = 
                               (fst _1, PROTO(JUSTBASE, params, isva), [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                           )
# 5174 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string list) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'old_pardef_list) in
    Obj.repr(
# 1253 "src/frontc/cparser.mly"
                           ( (* Convert pardecl to new style *)
                             let pardecl, isva = doOldParDecl _3 _5 in
                             (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, pardecl,isva), 
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec) 
                            )
# 5194 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1266 "src/frontc/cparser.mly"
                           ( (* Make the function declarator *)
                             let fdec = (fst _1,
                                         PROTO(JUSTBASE, [], false), 
                                         [], snd _1) in
                             announceFunctionName fdec;
                             (* Default is int type *)
                             let defSpec = [SpecType Tint] in
                             (snd _1, defSpec, fdec)
                            )
# 5210 "src/frontc/cparser.ml"
               : cabsloc * spec_elem list * name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1279 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_CONST), _1 )
# 5217 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1280 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_VOLATILE), _1 )
# 5224 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1281 "src/frontc/cparser.mly"
                                        ( SpecCV(CV_RESTRICT), _1 )
# 5231 "src/frontc/cparser.ml"
               : Cabs.spec_elem * cabsloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 1286 "src/frontc/cparser.mly"
                   ( [])
# 5237 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1287 "src/frontc/cparser.mly"
                                 ( fst _1 :: _2 )
# 5245 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1293 "src/frontc/cparser.mly"
                                        ( [] )
# 5251 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1294 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 5259 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string * cabsloc) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1296 "src/frontc/cparser.mly"
                                        ( ("__asm__", 
					   [CONSTANT(CONST_STRING (fst _3))]) :: _5 )
# 5270 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    Obj.repr(
# 1303 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3), _1 )
# 5279 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1308 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2), _1 )
# 5287 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1309 "src/frontc/cparser.mly"
                                        ( (fst _1, []), snd _1 )
# 5294 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1311 "src/frontc/cparser.mly"
                                        ( ("__thread",[]), _1 )
# 5301 "src/frontc/cparser.ml"
               : 'attribute_nocv))
; (fun __caml_parser_env ->
    Obj.repr(
# 1315 "src/frontc/cparser.mly"
                   ( [])
# 5307 "src/frontc/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'attribute_nocv) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv_list) in
    Obj.repr(
# 1316 "src/frontc/cparser.mly"
                                        ( fst _1 :: _2 )
# 5315 "src/frontc/cparser.ml"
               : 'attribute_nocv_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attribute_nocv) in
    Obj.repr(
# 1321 "src/frontc/cparser.mly"
                                        ( _1 )
# 5322 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1322 "src/frontc/cparser.mly"
                                        ( ("const", []), _1 )
# 5329 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1323 "src/frontc/cparser.mly"
                                        ( ("restrict",[]), _1 )
# 5336 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1324 "src/frontc/cparser.mly"
                                        ( ("volatile",[]), _1 )
# 5343 "src/frontc/cparser.ml"
               : 'attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'paren_attr_list) in
    Obj.repr(
# 1332 "src/frontc/cparser.mly"
                                        ( ("__attribute__", _3) )
# 5352 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1333 "src/frontc/cparser.mly"
                                        ( ("__declspec", _2) )
# 5360 "src/frontc/cparser.ml"
               : 'just_attribute))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'just_attribute) in
    Obj.repr(
# 1339 "src/frontc/cparser.mly"
                                        ( [_1] )
# 5367 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'just_attribute) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'just_attributes) in
    Obj.repr(
# 1340 "src/frontc/cparser.mly"
                                        ( _1 :: _2 )
# 5375 "src/frontc/cparser.ml"
               : 'just_attributes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1345 "src/frontc/cparser.mly"
                          ( PRAGMA (_2, _1) )
# 5383 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1346 "src/frontc/cparser.mly"
                                   ( PRAGMA (_2, _1) )
# 5392 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1347 "src/frontc/cparser.mly"
                                        ( PRAGMA (VARIABLE (fst _1), 
                                                  snd _1) )
# 5400 "src/frontc/cparser.ml"
               : 'pragma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1354 "src/frontc/cparser.mly"
             ( VARIABLE (fst _1) )
# 5407 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1356 "src/frontc/cparser.mly"
                  ( VARIABLE (fst _1) )
# 5414 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1357 "src/frontc/cparser.mly"
                                        ( _2 )
# 5422 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1358 "src/frontc/cparser.mly"
                                         ( CALL(VARIABLE (fst _1), [VARIABLE (fst _2)]) )
# 5430 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1359 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_INT (fst _1)) )
# 5437 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * cabsloc) in
    Obj.repr(
# 1360 "src/frontc/cparser.mly"
                                         ( CONSTANT(CONST_STRING (fst _1)) )
# 5444 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1364 "src/frontc/cparser.mly"
                                         ( VARIABLE "aconst" )
# 5451 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1366 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 5459 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1370 "src/frontc/cparser.mly"
                                         ( VARIABLE (fst _1 ^ ":" ^ fst _3) )
# 5467 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string * Cabs.cabsloc) in
    Obj.repr(
# 1372 "src/frontc/cparser.mly"
                                         ( VARIABLE ("default:" ^ fst _3) )
# 5475 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Cabs.cabsloc) in
    Obj.repr(
# 1377 "src/frontc/cparser.mly"
                                         ( VARIABLE ("__noreturn__") )
# 5482 "src/frontc/cparser.ml"
               : 'primary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_attr) in
    Obj.repr(
# 1381 "src/frontc/cparser.mly"
                                         ( _1 )
# 5489 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    Obj.repr(
# 1384 "src/frontc/cparser.mly"
                                     ( CALL(VARIABLE (fst _1), [VARIABLE ""]) )
# 5497 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'paren_attr_list_ne) in
    Obj.repr(
# 1385 "src/frontc/cparser.mly"
                                     ( CALL(VARIABLE (fst _1), _2) )
# 5505 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1387 "src/frontc/cparser.mly"
                                         (MEMBEROFPTR (_1, _3))
# 5513 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id_or_typename) in
    Obj.repr(
# 1388 "src/frontc/cparser.mly"
                                         (MEMBEROF (_1, _3))
# 5521 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'postfix_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'attr) in
    Obj.repr(
# 1389 "src/frontc/cparser.mly"
                                         (INDEX (_1, _3) )
# 5529 "src/frontc/cparser.ml"
               : 'postfix_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'postfix_attr) in
    Obj.repr(
# 1396 "src/frontc/cparser.mly"
                                         ( _1 )
# 5536 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1397 "src/frontc/cparser.mly"
                                         (EXPR_SIZEOF (fst _2) )
# 5544 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1399 "src/frontc/cparser.mly"
                           (let b, d = _3 in TYPE_SIZEOF (b, d))
# 5553 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unary_expression) in
    Obj.repr(
# 1401 "src/frontc/cparser.mly"
                                         (EXPR_ALIGNOF (fst _2) )
# 5561 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Cabs.spec_elem list * Cabs.decl_type) in
    Obj.repr(
# 1402 "src/frontc/cparser.mly"
                                         (let b, d = _3 in TYPE_ALIGNOF (b, d))
# 5570 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1403 "src/frontc/cparser.mly"
                                        (UNARY (PLUS, _2))
# 5578 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1404 "src/frontc/cparser.mly"
                                        (UNARY (MINUS, _2))
# 5586 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1405 "src/frontc/cparser.mly"
                            (UNARY (MEMOF, _2))
# 5594 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1407 "src/frontc/cparser.mly"
                                 (UNARY (ADDROF, _2))
# 5602 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1408 "src/frontc/cparser.mly"
                                 (UNARY (NOT, _2))
# 5610 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1409 "src/frontc/cparser.mly"
                                        (UNARY (BNOT, _2))
# 5618 "src/frontc/cparser.ml"
               : 'unary_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unary_attr) in
    Obj.repr(
# 1413 "src/frontc/cparser.mly"
                                         ( _1 )
# 5625 "src/frontc/cparser.ml"
               : 'cast_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1417 "src/frontc/cparser.mly"
                                        ( _1 )
# 5632 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1418 "src/frontc/cparser.mly"
                                        (BINARY(MUL ,_1 , _3))
# 5641 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1419 "src/frontc/cparser.mly"
                                          (BINARY(DIV ,_1 , _3))
# 5649 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'multiplicative_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cast_attr) in
    Obj.repr(
# 1420 "src/frontc/cparser.mly"
                                          (BINARY(MOD ,_1 , _3))
# 5657 "src/frontc/cparser.ml"
               : 'multiplicative_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1425 "src/frontc/cparser.mly"
                                        ( _1 )
# 5664 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1426 "src/frontc/cparser.mly"
                                            (BINARY(ADD ,_1 , _3))
# 5673 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'additive_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'multiplicative_attr) in
    Obj.repr(
# 1427 "src/frontc/cparser.mly"
                                            (BINARY(SUB ,_1 , _3))
# 5682 "src/frontc/cparser.ml"
               : 'additive_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1431 "src/frontc/cparser.mly"
                                        ( _1 )
# 5689 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1432 "src/frontc/cparser.mly"
                                     (BINARY(SHL ,_1 , _3))
# 5697 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'additive_attr) in
    Obj.repr(
# 1433 "src/frontc/cparser.mly"
                                     (BINARY(SHR ,_1 , _3))
# 5705 "src/frontc/cparser.ml"
               : 'shift_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1437 "src/frontc/cparser.mly"
                                        ( _1 )
# 5712 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1438 "src/frontc/cparser.mly"
                                   (BINARY(LT ,_1 , _3))
# 5720 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1439 "src/frontc/cparser.mly"
                                   (BINARY(GT ,_1 , _3))
# 5728 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1440 "src/frontc/cparser.mly"
                                      (BINARY(LE ,_1 , _3))
# 5736 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'relational_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_attr) in
    Obj.repr(
# 1441 "src/frontc/cparser.mly"
                                      (BINARY(GE ,_1 , _3))
# 5744 "src/frontc/cparser.ml"
               : 'relational_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1445 "src/frontc/cparser.mly"
                                        ( _1 )
# 5751 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1446 "src/frontc/cparser.mly"
                                            (BINARY(EQ ,_1 , _3))
# 5759 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'equality_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'relational_attr) in
    Obj.repr(
# 1447 "src/frontc/cparser.mly"
                                            (BINARY(NE ,_1 , _3))
# 5767 "src/frontc/cparser.ml"
               : 'equality_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1452 "src/frontc/cparser.mly"
                                        ( _1 )
# 5774 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'equality_attr) in
    Obj.repr(
# 1453 "src/frontc/cparser.mly"
                                       (BINARY(BAND ,_1 , _3))
# 5783 "src/frontc/cparser.ml"
               : 'bitwise_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1457 "src/frontc/cparser.mly"
                                           ( _1 )
# 5790 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_xor_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_and_attr) in
    Obj.repr(
# 1458 "src/frontc/cparser.mly"
                                           (BINARY(XOR ,_1 , _3))
# 5798 "src/frontc/cparser.ml"
               : 'bitwise_xor_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1462 "src/frontc/cparser.mly"
                                          ( _1 )
# 5805 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bitwise_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_xor_attr) in
    Obj.repr(
# 1463 "src/frontc/cparser.mly"
                                          (BINARY(BOR ,_1 , _3))
# 5813 "src/frontc/cparser.ml"
               : 'bitwise_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1467 "src/frontc/cparser.mly"
                                                ( _1 )
# 5820 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_and_attr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bitwise_or_attr) in
    Obj.repr(
# 1468 "src/frontc/cparser.mly"
                                             (BINARY(AND ,_1 , _3))
# 5829 "src/frontc/cparser.ml"
               : 'logical_and_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1472 "src/frontc/cparser.mly"
                                               ( _1 )
# 5836 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'logical_and_attr) in
    Obj.repr(
# 1473 "src/frontc/cparser.mly"
                                               (BINARY(OR ,_1 , _3))
# 5844 "src/frontc/cparser.ml"
               : 'logical_or_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'logical_or_attr) in
    Obj.repr(
# 1477 "src/frontc/cparser.mly"
                                           ( _1 )
# 5851 "src/frontc/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'logical_or_attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'conditional_attr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1480 "src/frontc/cparser.mly"
                                          ( QUESTION(_1, _3, _5) )
# 5860 "src/frontc/cparser.ml"
               : 'conditional_attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'conditional_attr) in
    Obj.repr(
# 1483 "src/frontc/cparser.mly"
                                          ( _1 )
# 5867 "src/frontc/cparser.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 1487 "src/frontc/cparser.mly"
                                         ( [_1] )
# 5874 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1488 "src/frontc/cparser.mly"
                                         ( _1 :: _3 )
# 5882 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1489 "src/frontc/cparser.mly"
                                         ( _3 )
# 5889 "src/frontc/cparser.ml"
               : 'attr_list_ne))
; (fun __caml_parser_env ->
    Obj.repr(
# 1492 "src/frontc/cparser.mly"
                                         ( [] )
# 5895 "src/frontc/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_ne) in
    Obj.repr(
# 1493 "src/frontc/cparser.mly"
                                         ( _1 )
# 5902 "src/frontc/cparser.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list_ne) in
    Obj.repr(
# 1496 "src/frontc/cparser.mly"
                                         ( _2 )
# 5910 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1497 "src/frontc/cparser.mly"
                                         ( [] )
# 5917 "src/frontc/cparser.ml"
               : 'paren_attr_list_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_list) in
    Obj.repr(
# 1500 "src/frontc/cparser.mly"
                                         ( _2 )
# 5925 "src/frontc/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1501 "src/frontc/cparser.mly"
                                         ( [] )
# 5932 "src/frontc/cparser.ml"
               : 'paren_attr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 1505 "src/frontc/cparser.mly"
                                        ( [] )
# 5938 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1506 "src/frontc/cparser.mly"
                                        ( ("volatile", []) :: _2 )
# 5946 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Cabs.cabsloc) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Cabs.attribute list) in
    Obj.repr(
# 1507 "src/frontc/cparser.mly"
                                        ( ("const", []) :: _2 )
# 5954 "src/frontc/cparser.ml"
               : Cabs.attribute list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1510 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 5961 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'one_string_constant) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmtemplate) in
    Obj.repr(
# 1511 "src/frontc/cparser.mly"
                                                 ( _1 :: _2 )
# 5969 "src/frontc/cparser.ml"
               : 'asmtemplate))
; (fun __caml_parser_env ->
    Obj.repr(
# 1514 "src/frontc/cparser.mly"
                        ( None )
# 5975 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asminputs) in
    Obj.repr(
# 1516 "src/frontc/cparser.mly"
                        ( let (ins, clobs) = _3 in
                          Some {aoutputs = _2; ainputs = ins; aclobbers = clobs} )
# 5984 "src/frontc/cparser.ml"
               : 'asmoutputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1520 "src/frontc/cparser.mly"
                                        ( [] )
# 5990 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperandsne) in
    Obj.repr(
# 1521 "src/frontc/cparser.mly"
                                        ( List.rev _1 )
# 5997 "src/frontc/cparser.ml"
               : 'asmoperands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1524 "src/frontc/cparser.mly"
                                        ( [_1] )
# 6004 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'asmoperandsne) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmoperand) in
    Obj.repr(
# 1525 "src/frontc/cparser.mly"
                                        ( _3 :: _1 )
# 6012 "src/frontc/cparser.ml"
               : 'asmoperandsne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Cabs.expression * cabsloc) in
    Obj.repr(
# 1528 "src/frontc/cparser.mly"
                                                           ( (_1, fst _2, fst _4) )
# 6022 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'asmopname) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string * cabsloc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Cabs.cabsloc) in
    Obj.repr(
# 1529 "src/frontc/cparser.mly"
                                                           ( (_1, fst _2, NOTHING ) )
# 6031 "src/frontc/cparser.ml"
               : 'asmoperand))
; (fun __caml_parser_env ->
    Obj.repr(
# 1532 "src/frontc/cparser.mly"
                             ( ([], []) )
# 6037 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'asmoperands) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmclobber) in
    Obj.repr(
# 1534 "src/frontc/cparser.mly"
                        ( (_2, _3) )
# 6045 "src/frontc/cparser.ml"
               : 'asminputs))
; (fun __caml_parser_env ->
    Obj.repr(
# 1537 "src/frontc/cparser.mly"
                                        ( None )
# 6051 "src/frontc/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string * Cabs.cabsloc) in
    Obj.repr(
# 1538 "src/frontc/cparser.mly"
                                        ( Some (fst _2) )
# 6058 "src/frontc/cparser.ml"
               : 'asmopname))
; (fun __caml_parser_env ->
    Obj.repr(
# 1542 "src/frontc/cparser.mly"
                                        ( [] )
# 6064 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1543 "src/frontc/cparser.mly"
                                        ( _2 )
# 6071 "src/frontc/cparser.ml"
               : 'asmclobber))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'one_string_constant) in
    Obj.repr(
# 1546 "src/frontc/cparser.mly"
                                                 ( [_1] )
# 6078 "src/frontc/cparser.ml"
               : 'asmcloberlst_ne))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'one_string_constant) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'asmcloberlst_ne) in
    Obj.repr(
# 1547 "src/frontc/cparser.mly"
                                                 ( _1 :: _3 )
# 6086 "src/frontc/cparser.ml"
               : 'asmcloberlst_ne))
(* Entry interpret *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let interpret (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Cabs.definition list)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Cabs.definition list)
;;
# 1551 "src/frontc/cparser.mly"



# 6119 "src/frontc/cparser.ml"
