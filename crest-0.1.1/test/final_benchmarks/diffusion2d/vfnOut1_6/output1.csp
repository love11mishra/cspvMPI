//@@MpiTrace@@

channel ch_1_0_1_s 0;
channel ch_1_0_1 1;
channel ch_2_0_1_s 0;
channel ch_2_0_1 1;
channel ch_3_0_1_s 0;
channel ch_3_0_1 1;
channel ch_4_0_1_s 0;
channel ch_4_0_1 1;
channel ch_5_0_1_s 0;
channel ch_5_0_1 1;

var threshold = 131072;
var exit_ = false;
var num_procs = 6;
var RecvBuf_0_1_1_271[1];
var RecvBuf_0_2_1_271[1];
var RecvBuf_0_3_1_271[1];
var RecvBuf_0_4_1_271[1];
var RecvBuf_0_5_1_271[1];
var SendBuf_1_0_1_256 = [8];
var SendBuf_2_0_1_256 = [16];
var SendBuf_3_0_1_256 = [8];
var SendBuf_4_0_1_256 = [8];
var SendBuf_5_0_1_256 = [16];

// Line 271
MPI_Recv_0_1_1_271() = MPI_Recv_0_1_1_271_starts -> if( 8 > threshold ) { ch_1_0_1_s?[x[0] <= 8]x ->{RecvBuf_0_1_1_271 = x} -> MPI_Recv_0_1_1_271_ends -> Skip }
					else { ch_1_0_1?[x[0] <= 8]x ->{RecvBuf_0_1_1_271 = x} -> MPI_Recv_0_1_1_271_ends -> Skip [] ch_1_0_1_s?[x[0] <= 8]x ->{RecvBuf_0_1_1_271 = x} -> MPI_Recv_0_1_1_271_ends -> Skip };
// Line 271
MPI_Recv_0_2_1_271() = MPI_Recv_0_2_1_271_starts -> if( 16 > threshold ) { ch_2_0_1_s?[x[0] <= 16]x ->{RecvBuf_0_2_1_271 = x} -> MPI_Recv_0_2_1_271_ends -> Skip }
					else { ch_2_0_1?[x[0] <= 16]x ->{RecvBuf_0_2_1_271 = x} -> MPI_Recv_0_2_1_271_ends -> Skip [] ch_2_0_1_s?[x[0] <= 16]x ->{RecvBuf_0_2_1_271 = x} -> MPI_Recv_0_2_1_271_ends -> Skip };
// Line 271
MPI_Recv_0_3_1_271() = MPI_Recv_0_3_1_271_starts -> if( 8 > threshold ) { ch_3_0_1_s?[x[0] <= 8]x ->{RecvBuf_0_3_1_271 = x} -> MPI_Recv_0_3_1_271_ends -> Skip }
					else { ch_3_0_1?[x[0] <= 8]x ->{RecvBuf_0_3_1_271 = x} -> MPI_Recv_0_3_1_271_ends -> Skip [] ch_3_0_1_s?[x[0] <= 8]x ->{RecvBuf_0_3_1_271 = x} -> MPI_Recv_0_3_1_271_ends -> Skip };
// Line 271
MPI_Recv_0_4_1_271() = MPI_Recv_0_4_1_271_starts -> if( 8 > threshold ) { ch_4_0_1_s?[x[0] <= 8]x ->{RecvBuf_0_4_1_271 = x} -> MPI_Recv_0_4_1_271_ends -> Skip }
					else { ch_4_0_1?[x[0] <= 8]x ->{RecvBuf_0_4_1_271 = x} -> MPI_Recv_0_4_1_271_ends -> Skip [] ch_4_0_1_s?[x[0] <= 8]x ->{RecvBuf_0_4_1_271 = x} -> MPI_Recv_0_4_1_271_ends -> Skip };
// Line 271
MPI_Recv_0_5_1_271() = MPI_Recv_0_5_1_271_starts -> if( 16 > threshold ) { ch_5_0_1_s?[x[0] <= 16]x ->{RecvBuf_0_5_1_271 = x} -> MPI_Recv_0_5_1_271_ends -> Skip }
					else { ch_5_0_1?[x[0] <= 16]x ->{RecvBuf_0_5_1_271 = x} -> MPI_Recv_0_5_1_271_ends -> Skip [] ch_5_0_1_s?[x[0] <= 16]x ->{RecvBuf_0_5_1_271 = x} -> MPI_Recv_0_5_1_271_ends -> Skip };
// Line 256
MPI_Send_1_0_1_256() = MPI_Send_1_0_1_256_starts -> if( 8 > threshold ) { ch_1_0_1_s!SendBuf_1_0_1_256 -> MPI_Send_1_0_1_256_ends -> Skip } else { ch_1_0_1!SendBuf_1_0_1_256 -> MPI_Send_1_0_1_256_ends -> Skip };
// Line 256
MPI_Send_2_0_1_256() = MPI_Send_2_0_1_256_starts -> if( 16 > threshold ) { ch_2_0_1_s!SendBuf_2_0_1_256 -> MPI_Send_2_0_1_256_ends -> Skip } else { ch_2_0_1!SendBuf_2_0_1_256 -> MPI_Send_2_0_1_256_ends -> Skip };
// Line 256
MPI_Send_3_0_1_256() = MPI_Send_3_0_1_256_starts -> if( 8 > threshold ) { ch_3_0_1_s!SendBuf_3_0_1_256 -> MPI_Send_3_0_1_256_ends -> Skip } else { ch_3_0_1!SendBuf_3_0_1_256 -> MPI_Send_3_0_1_256_ends -> Skip };
// Line 256
MPI_Send_4_0_1_256() = MPI_Send_4_0_1_256_starts -> if( 8 > threshold ) { ch_4_0_1_s!SendBuf_4_0_1_256 -> MPI_Send_4_0_1_256_ends -> Skip } else { ch_4_0_1!SendBuf_4_0_1_256 -> MPI_Send_4_0_1_256_ends -> Skip };
// Line 256
MPI_Send_5_0_1_256() = MPI_Send_5_0_1_256_starts -> if( 16 > threshold ) { ch_5_0_1_s!SendBuf_5_0_1_256 -> MPI_Send_5_0_1_256_ends -> Skip } else { ch_5_0_1!SendBuf_5_0_1_256 -> MPI_Send_5_0_1_256_ends -> Skip };

P0() = (MPI_Recv_0_1_1_271(); MPI_Recv_0_2_1_271(); MPI_Recv_0_1_1_271(); MPI_Recv_0_2_1_271(); MPI_Recv_0_3_1_271(); MPI_Recv_0_4_1_271(); MPI_Recv_0_5_1_271(); MPI_Recv_0_3_1_271(); MPI_Recv_0_4_1_271(); MPI_Recv_0_5_1_271(); MPI_Recv_0_1_1_271(); MPI_Recv_0_2_1_271(); MPI_Recv_0_1_1_271(); MPI_Recv_0_2_1_271(); MPI_Recv_0_3_1_271(); MPI_Recv_0_4_1_271(); MPI_Recv_0_5_1_271(); MPI_Recv_0_3_1_271(); MPI_Recv_0_4_1_271(); MPI_Recv_0_5_1_271())[][exit_ == true]Skip;
P1() = (MPI_Send_1_0_1_256(); MPI_Send_1_0_1_256(); MPI_Send_1_0_1_256(); MPI_Send_1_0_1_256())[][exit_ == true]Skip;
P2() = (MPI_Send_2_0_1_256(); MPI_Send_2_0_1_256(); MPI_Send_2_0_1_256(); MPI_Send_2_0_1_256())[][exit_ == true]Skip;
P3() = (MPI_Send_3_0_1_256(); MPI_Send_3_0_1_256(); MPI_Send_3_0_1_256(); MPI_Send_3_0_1_256())[][exit_ == true]Skip;
P4() = (MPI_Send_4_0_1_256(); MPI_Send_4_0_1_256(); MPI_Send_4_0_1_256(); MPI_Send_4_0_1_256())[][exit_ == true]Skip;
P5() = (MPI_Send_5_0_1_256(); MPI_Send_5_0_1_256(); MPI_Send_5_0_1_256(); MPI_Send_5_0_1_256())[][exit_ == true]Skip;
Prog() = P0() || P1() || P2() || P3() || P4() || P5();
Prog1() = {threshold = 0} -> Prog();

#assert Prog() deadlockfree;
#assert Prog1() deadlockfree;
